<?php
/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\Group;
// use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function penchas_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
}
function penchas_preprocess_page(&$variables) {
  $variables['base_path'] = base_path();
}
function penchas_preprocess_html(&$variables) {
  $variables['base_path'] = base_path();

  // dd('asdjh'.$themePath);
}
function penchas_preprocess_block(&$variables) {
  $variables['base_path'] = base_path();
  $login_url = \Drupal\Core\Url::fromRoute('user.login')->toString();
  // Pass the login URL to the template
  $variables['user_login_path'] = $login_url;

  $themeHandler = \Drupal::service('theme_handler');
  $themePath = $themeHandler->getTheme($themeHandler->getDefault())->getPath();
  $variables['themePath'] = $themePath;
  // $variables['page'] = $variables['html']['page'];
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  if($variables['plugin_id'] == 'inline_block:houses_sliders'){
    $group_storage = \Drupal::entityTypeManager()->getStorage('group');
    $group_ids = $group_storage->getQuery()->accessCheck(false)->execute();
    $groups = Group::loadMultiple($group_ids);
    // Sort groups alphabetically by title
    usort($groups, function ($a, $b) {
      // Get titles of the groups
      $title_a = $a->label(); // 'label' is the function to get the group title.
      $title_b = $b->label();

      // Compare titles alphabetically (case-insensitive)
      return strcasecmp($title_a, $title_b);
    });
    $groups_html = '';

    foreach ($groups as $group) {
      $description = $group->get('field_description')->value ?
    preg_replace('/\s+/', ' ', trim(html_entity_decode(strip_tags($group->get('field_description')->value)))) : '';

      // if($group->id() == 1){
      // }
      $number_of_members = $group->get('field_number_of_residents')->value ? $group->get('field_number_of_residents')->value.' residents' : '';
      $file_path = $image_alt = $image_title ='';
      if($group->get('field_image')){
        if($group->get('field_image')->entity){
          if($group->get('field_image')->entity->field_media_image){
            $image_alt = $group->get('field_image')->entity->field_media_image->getValue()[0]['alt'];
            $image_title = $group->get('field_image')->entity->field_media_image->getValue()[0]['title'];
            $file = File::load($group->get('field_image')->entity->field_media_image->getValue()[0]['target_id']);
            $file_path = $file->createFileUrl();
          }
        }
      }
      $group_tags = $group->get('field_community')->value;
      $tags = $group_tags.' '.$number_of_members;
      if(!empty($group_tags) && !empty($number_of_members)){
        $tags = $group_tags.', '.$number_of_members;
      }


      $group_path = '/group/' . $group->id();
      $alias_manager = \Drupal::service('path_alias.manager');
      $url = $alias_manager->getAliasByPath($group_path);
      $groups_html .= '<div class="offer-slider-block" data-group="'.$group->get('field_house_machine_name')->value.'">'.
                          '<div class="program-card"><a href="'.$url.'"></a>'.
                              '<div class="program-card-img">'.
                                '<img src="'.$file_path.'" alt="'.$image_alt.'" title="'.$image_title.'">'.
                              '</div>'.
                              '<div class="program-card-info">'.
                                  '<h4>'.$group->label().'</h4>'.
                                  '<div class="tags">'.
                                      '<p>'.$tags.'</p>'.
                                '</div>'.
                                  '<p>'.$description.'</p>'.
                                  '<svg width="27" height="30" viewBox="0 0 27 30" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0 14.6816H24.5156" stroke="#011F5B" stroke-width="1.94183"></path><path d="M14.3203 4L25.0004 14.4373L14.3203 25.1174" stroke="#011F5B" stroke-width="1.94183"></path></svg>'.
                                      '</svg>'.
                              '</div>'.
                          '</div>'.
                      '</div>';
    }
    $variables['all_group_houses'] = $groups_html;
  }
}

function penchas_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  $themeHandler = \Drupal::service('theme_handler');
  $themePath = $themeHandler->getTheme($themeHandler->getDefault())->getPath();

  // dd($javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']);
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['scope'] = 'footer';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['group'] = -100;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['type'] = 'file';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['data'] = $themePath . '/js/tbcustom.js';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['version'] = '1.x';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['minified'] = '';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['weight'] =  0.079;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['cache'] = 1;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['preprocess'] = 1;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['attributes'] = array();
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['browsers'] = array();
}

function penchas_css_alter(&$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {

  // Remove defaults.css file.
  // unset($css['https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/css/font-awesome.min.css']);
  // unset($css['modules/contrib/tb_megamenu/css/tb_megamenu.default.css']);
  // unset($css['modules/contrib/tb_megamenu/css/tb_megamenu.bootstrap.css']);

}

function penchas_breadcrumb($variables) {
  $breadcrumb = $variables['breadcrumb'];
  if (!empty($breadcrumb)) {
    // Adding the title of the current page to the breadcrumb.
    $breadcrumb[] = drupal_get_title();

    // Provide a navigational heading to give context for breadcrumb links to
    // screen-reader users. Make the heading invisible with .element-invisible.
    $output = '<h2 class="element-invisible">' . t('You are here') . '</h2>';

    $output .= '<div class="breadcrumb">' . implode(' Â» ', $breadcrumb) . '</div>';
    return $output;
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function penchas_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  if (isset($variables['view']->element['#view_id'])) {
    $suggestions[] = 'views_view__' . $variables['view']->element['#view_id'];
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function penchas_preprocess_views_view(&$variables) {
  $variables['base_path'] = base_path();
  $view = $variables['view'];
  $id = $view->storage->id();
  if($id == 'team_members'){
    $variables['display_id'] = $view->current_display;
    // dd($view);
    $team_filters_arr = '';
    $selected_filters = [];
    $values = $view->getExposedInput();
    // dd($values);
    $team_filters = [];
    foreach ($view->filter as $filter) {
      if($filter->isExposed()) {
        $team_filters[] = $filter->options;
      }
    }
    if(!empty($team_filters)){
      if(!empty($team_filters[0]['value'])){
        foreach ($team_filters[0]['value'] as $key => $team_filter) {
          if($key != 'all'){
            $team_filters_arr .= '<li class="nav-item" role="presentation">
                  <a class="nav-link active" href="/team-members?field_type_value='.$key.'">'.$team_filter.'</a>
                </li>';
          }
        }
      }
      $team_filters_output = '<div class="tab-outer"><ul class="nav nav-tabs" id="myTab" role="tablist">'.$team_filters_arr.'</ul></div>';
    }
    $variables['team_filters'] = $team_filters_output;
  }
  if($id == 'group_houses'){
    $selected_filters = [];
    $values = $view->getExposedInput();
    $filters = [];
    foreach ($view->filter as $filter) {
      if($filter->isExposed()) {
        $filters[] = $filter->options;
      }
    }

    $filters_html = '';
    if(!empty($values)){
      $community = ($values['field_community_value'] ? $values['field_community_value'] : 'All');
      $selected_filters['field_community'] = $community;
      if(isset($values['field_number_of_residents_value']) && $values['field_number_of_residents_value'] != 'All'){
        $variables['size'] = $values['field_number_of_residents_value'];
      }else{
        $variables['size'] = 'All';
      }
      $variables['operator'] = ( $values['field_number_of_residents_value_1_op'] ?  $values['field_number_of_residents_value_1_op'] : '<');
      $residents_arr_ = $values['field_number_of_residents_value_1'];
      $small_size_value = ($residents_arr_['value'] ? $residents_arr_['value'] : '');
      $small_size_min = ($residents_arr_['min'] ? $residents_arr_['min'] : '');
      $small_size_max = ($residents_arr_['max'] ? $residents_arr_['max'] : '');

      $size = 'All';
      $operator = '>';
      // params condition : (Small: <300; Medium: 301<>600; Large >600)
      $min = $max = $value = '';
      if($variables['size'] == 1){
        $selected_filters['size'] = 'Small < 300';
        $size = '1';
        $operator = '<=';
        $value = 300;
      }else if($variables['size'] == 2){
        $size = '2';
        $operator = 'between';
        $min = 300;
        $max = 600;
        $selected_filters['size'] = 'Medium 301<>600';
      }else if($variables['size'] == 3){
        $size = '3';
        $operator = '>';
        $value = 600;
        $selected_filters['size'] = 'Large >600';
      }

      $link = '/all-college-houses?field_community_value='.$community.'&field_number_of_residents_value='.$size.'&field_number_of_residents_value_1_op='.$operator.'&field_number_of_residents_value_1%5Bvalue%5D='.$value.'&field_number_of_residents_value_1%5Bmin%5D='.$min.'&field_number_of_residents_value_1%5Bmax%5D='.$max;
      $link = '/all-college-houses';
      // dump($link);
      if(!empty($selected_filters) && isset($selected_filters['field_community'])){
        $filters_html .= '<a href="'.$link.'"><span class="filter-tag">'.$selected_filters['field_community'].'</span></a>';
      }
      if(!empty($selected_filters) && isset($selected_filters['size'])){
        $filter_size = $selected_filters['size'];
        $filters_html .= '<a href="'.$link.'"><span class="filter-tag">'.$filter_size.'</span></a>';
      }
    }
    $variables['selected_filters_output'] = $filters_html;
  }
}

