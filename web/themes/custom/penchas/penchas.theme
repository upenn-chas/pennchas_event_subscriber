<?php
/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\Group;
// use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;

use Drupal\node\Entity\NodeType;
use Drupal\Core\Database\Database;
use Drupal\node\NodeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\user\Entity\User;
use Drupal\group\Entity\GroupMembership;
use Drupal\group\Entity\GroupRole;


/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function penchas_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
}
function process_submenu($submenu) {
  $submenu_items = '';

  foreach ($submenu as $item) {
    $submenu_items .= '<li class="navigation__item nav-item">';
    $submenu_items .= '<a href="'.$item->link->getUrlObject()->toString().'" class="nav-link nav-link--">'.$item->link->getTitle().'</a>';
    $submenu_items .= '</li>';
  }

  return $submenu_items;
}

function penchas_preprocess_node_edit_form(&$variables) {
  $variables['base_path'] = base_path();
  $group_banner_html = '<br/>';
  $current_path = \Drupal::service('path.current')->getPath();
  $path_parts = explode('/', trim($current_path, '/'));
  if (isset($path_parts[0]) && $path_parts[0] === 'group' && isset($path_parts[1])) {
    if (strpos($path_parts[4], 'group_node') !== false) {
      $bundle_type = str_replace('group_node:', '', $path_parts[4]);
      if($bundle_type == 'reserve_room' || $bundle_type == 'room'){
        if($bundle_type == 'reserve_room'){
          $label = "Room Reservations";
        }else if($bundle_type == 'room'){
          $label = "Room";
        }
        $group_id = $path_parts[1];
        if($group_id){
          $groupData = Group::load($group_id);
          $url_path = $groupData->toUrl()->toString();
          $field_bg_color = $groupData->get('field_color')->value;
          $field_circle_color = $groupData->get('field_circle_color')->value;
          $field_menus = $groupData->get('field_menus');
          $simplified_menu_html = '';
          foreach ($field_menus as $key => $group_menu) {
            
            // Load the menu using the menu_link_tree service
            $menu_tree = \Drupal::service('menu.link_tree');
            $menu_name = $group_menu->target_id;
            
            // Fetch the menu tree data
            $menu_data = $menu_tree->load($menu_name,new MenuTreeParameters());
            
            foreach ($menu_data as $item) {
              $simplified_menu_html .= '<div class="dropdown">';
              $simplified_menu_html .= '<a class="btn btn-secondary dropdown-toggle" >'.$item->link->getTitle().'</a>';
              $simplified_menu_html .= '<div class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButton2">
                    <ul class="clearfix nav">';
              $simplified_menu_html .= process_submenu($item->subtree);
              
              $simplified_menu_html .= '</ul></div></div>';
            }
          }
          $field_heading = $groupData->get('field_heading')->value;
          $group_label = $groupData->get('label')->value;
          $group_banner_html = '<section class="hero-banner without-image" style="background-color: #'.$field_bg_color.';">'
                                .'<style>.hero-banner .container:before {background: #'.$field_circle_color.'}</style>'
                                .'<div class="container">'
                                  .'<div class="row">'
                                    .'<div class="col-12 col-lg-6">'
                                      .'<div class="breadcrumbs-block">'
                                        .'<nav aria-label="breadcrumb">'
                                          .'<ol class="breadcrumb">'
                                            .'<li class="breadcrumb-item"><a href="/">Home</a></li>'
                                            .'<li class="breadcrumb-item"><a href="'.$url_path.'">'.$group_label.' House</a></li>'
                                            .'<li class="breadcrumb-item active" aria-current="page">'.$label.'</li>'
                                         .' </ol>'
                                        .'</nav>'
                                      .'</div>'
                                      .'<div class="banner-info">'
                                        .'<h1>'.$label.'</h1>'
                                      .'</div>'
                                      .'<div class="internal-links">'.$simplified_menu_html.'</div>'
                                    .'</div>'
                                  .'</div>'
                                .'</div>'
                              .'</section>';
    
        }
      }
    }
  }
  
  $variables['group_banner_info'] = $group_banner_html;

}
function penchas_preprocess_node(&$variables) {
  $variables['base_path'] = base_path();
  $variables['house_string'] = 'house';
  $variables['breadcrumb_home'] = 'HOME';
  $variables['breadcrumb_dashboard'] = 'Dashboard';
  $variables['breadcrumb_dashboard_link'] = '/user';
  $variables['primary_color'] = '#ffea3f';
  $variables['room_reservation_heading'] = 'My Room Reservations';
  $current_user = \Drupal::currentUser();
  $edit_link = '';
  
  $variables['breadcrumbs_list'] = '';
  $node = \Drupal::routeMatch()->getParameter('node');
 
  if ($node instanceof NodeInterface) {
    if ($node->bundle() == 'chas_event') {
      $calendar_link = base_path();
      if ($current_user->isAuthenticated() ) {
        $moderator_link = '';
        $eventHouseId = (int) $node->get('field_location')->getString();
        // dump($eventHouseId);
        $housesId = [$eventHouseId];
        if (count($housesId) == 1){
          $calendar_link = base_path().'group/'.$eventHouseId.'/calendar';
        }else{
          // $connection = Database::getConnection();
          // $query = $connection->select('group_relationship_field_data', 'gr')
          //     ->fields('gr', ['id'])
          //     ->condition('entity_id', $current_user->id(), '=')
          //     ->condition('plugin_id', 'group_membership', '=');
          // $results = $query->execute()->fetchAll();
          // if(!empty($results)){

          // }
        }
        $variables['is_logged_in'] = TRUE;
        $variables['attributes']['class'][] = 'logged-in-user';
        $edit_url = \Drupal\Core\Url::fromRoute('entity.node.edit_form', ['node' => $node->id()]);
        $node_edit_url = $edit_url->toString();

        if($node->get('moderation_state')){
          if($node->get('moderation_state')->value == 'draft'){
            // $moderator_link = '<li><a href="#content-moderation-entity-moderation-form"><img src="'.base_path().'themes/custom/penchas/assets/images/gear.svg"> Moderate</a></li>';
            $moderator_link = '<li><a href="'.base_path().'moderate/event/'.$node->id().'"><img src="'.base_path().'themes/custom/penchas/assets/images/gear.svg"> Moderate</a></li>';
          }
        }

        $edit_link = '<li><a href="'.$node_edit_url.'"><img src="'.base_path().'themes/custom/penchas/assets/images/edit.svg"> Edit</a></li>'.$moderator_link;
      }
      $variables['breadcrumbs_list'] = '<div class="event-details-breadcrumbs"><div class="event-breadcrumbs"><ul><li><a href="'.$calendar_link.'"><img src="'.base_path().'themes/custom/penchas/assets/images/back-arrow.svg"> Back to Calendar</a></li>'.$edit_link.'</ul></div></div>';
    }
  }
}

function penchas_preprocess_html(&$variables) {
  $variables['base_path'] = base_path();
  $variables['breadcrumb_home'] = 'HOME';
  $url = \Drupal::service('url_generator')->generateFromRoute('<front>');
  $front_page_path = \Drupal::request()->getSchemeAndHttpHost() . $url;
  $variables['front_page_url'] = $front_page_path;

  /* SAML resposne testing starts */
  // get all group roles 
  // $group_role_query = \Drupal::database()->select('group_relationship__group_roles', 'gr')
  // ->distinct()  // Apply DISTINCT
  // ->fields('gr', ['group_roles_target_id']); 
  // // ->leftJoin('groups_field_data', 'gf', 'gf.id = gr.entity_id');

  // $result = $group_role_query->execute();

  // // Initialize an array to store the results.
  // $group_roles_target_ids = [];
  // foreach ($result as $row) {
  //   $group_roles_target_ids[] = $row->group_roles_target_id;  // Collect the 'group_roles_target_id' values.
  // }
  $query = \Drupal::entityQuery('group_role');
  $role_ids = $query->execute();
  $group_roles = GroupRole::loadMultiple($role_ids);
  foreach ($group_roles as $role) {
    $group_roles_target_ids[] = $role->id();
  }
  // dd($group_roles_target_ids);
  
  // get all Drupal user role
  // $user_roles_query = \Drupal::database()->select('user__roles', 'ur')
  // ->distinct()  // Apply DISTINCT
  // ->fields('ur', ['roles_target_id']); 
  // $user_role_result = $user_roles_query->execute();
  // $user_roles_target_ids = [];
  // foreach ($user_role_result as $row) {
  //   $user_roles_target_ids[] = $row->roles_target_id;  // Collect the 'group_roles_target_id' values.
  // }
  // Get all user roles using the entity query.
  $query = \Drupal::entityQuery('user_role');
  $role_ids = $query->execute();
  $drupal_user_roles = \Drupal\user\Entity\Role::loadMultiple($role_ids);
  foreach ($drupal_user_roles as $role) {
    $drupal_user_roles[] = $role->id();
  }

  // dd($user_roles_target_ids);

  // get all groups IDs by machine names
  $group_machine_name_query = \Drupal::database()->select('group__field_house_machine_name', 'gfh')
  ->fields('gfh', ['entity_id', 'field_house_machine_name_value']);
  $gf_result = $group_machine_name_query->execute()->fetchAll();
  $groups_data = [];
  foreach ($gf_result as $row) {
    $groups_data[$row->field_house_machine_name_value] = $row->entity_id;  // Collect the 'group_roles_target_id' values.
  }

  
  
  $personentitlement = [
    "0" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.campus_partner",
    "1" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.ra",
    "2" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.house_coordinator",
    "3" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.student.Harnwell_CH",
    "4" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.student.Gregory_CH",
    "5" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.student.chas_technology"
  ];
  
  foreach ($personentitlement as $row => $value) {
    $array = explode('.', $value);
    $last_string = end($array);
    // var_dump($last_string);
    // first check if any group is existed then 
  
    // check if any role existed in group roles 
  
    // check if any role existed in Drupal roles.
  
    // Asign that user into group
    if (array_key_exists($last_string, $groups_data)) {
      $group_ids[] = $groups_data[$last_string];
    }
    if (in_array($last_string, $drupal_user_roles)) {
      $drupal_user_roles_ids[] = $last_string;
    }
    if (in_array('house1-' . $last_string, $group_roles_target_ids)) {
      $group_user_roles_ids[] = $last_string;
    }
  }
  // dd($group_roles_target_ids);
  // dump($group_ids);
  // dump($drupal_user_roles_ids);
  // dump($group_user_roles_ids);

  // dd($groups_data);

  if (isset($group_ids)) {
    foreach ($group_ids as $key => $group_id) {
      if(isset($group_user_roles_ids)){
        foreach ($group_user_roles_ids as $gr_key => $group_user_roles_id) {
          
          // insertion into tables "group_user_roles_ids" and get ID ,
          // Add row into  "group_relationship" with relation of above inserted ID (from table "group_user_roles_ids").
          // Add row into "group_relationship__group_roles" with relation of above inserted ID (from atble "group_user_roles_ids").
  
          // Exmaple : 1094 in table "group_user_roles_ids"
        }

      }
      if(isset($drupal_user_roles_ids)){

      }
    }
  }
  
  



  /* SAML resposne testing ends */

}


function penchas_preprocess_block(&$variables) {

  $connection = Database::getConnection();
  // $variables['node_current_url'] = FALSE;
  $variables['dashboard_access'] = FALSE;
  // Check if the block is the specific inline block we want to target.
  // if ($variables['plugin_id'] === 'inline_block:dashboard_blocks') {
  //   $field_values = $variables['content']['field_block_display_condition_wi'];

  //   // $block_content = BlockContent::load($block_content_id);
  //   if (!isset($field_values['#items'])) {
  //     // If there are no field values, stop further processing.
  //     return;
  //   }
      
  //     $group_roles_arr = [];
  //     $group_conditions = $variables['content']['#block_content']->get('field_block_display_condition_wi')->getValue();
  //     foreach ($group_conditions as $value) {
  //       $group_roles_arr[] = $value['target_id'];
  //     }
  //     $variables['dashboard_access'] = TRUE;

  //     // // Load the current user.
  //     $current_user = \Drupal::currentUser();
  //     // $user_entity = \Drupal\user\Entity\User::load($current_user->id());
  //     // // dd($user_entity);

  //     $query = $connection->select('group_relationship_field_data', 'gr')
  //     ->fields('gr', ['id'])
  //     ->condition('entity_id', $current_user->id(), '=')
  //     ->condition('plugin_id', 'group_membership', '=');

  //     // // Execute the query and fetch all results as an associative array.
  //     $results = $query->execute()->fetchAssoc('id');
  //     // dump($results);
  //   if(!$results){
  //     if(!empty($results['id'])){
  //       $current_user_role_id = $results['id'];
  //       $query = $connection->select('group_relationship__group_roles', 'grr')
  //       ->fields('grr', ['group_roles_target_id'])
  //       ->condition('entity_id', $current_user_role_id, '=');
  //       $group_roles_results = $query->execute()->fetchAssoc('group_roles_target_id');
  //       if(!empty($group_roles_results)){
  //         $group_role = $group_roles_results['group_roles_target_id'];
  //         $variables['content'] = [];
          
  //       }
  //     }
  //   }
  //   if (!$user_entity) {
  //     // No user entity, so do not show the block.
  //     $variables['#access'] = FALSE;
  //     return;
  //   }
      
  //   if(!empty($group_role)){
  //       $key = array_search($group_role, $group_roles_arr);
  //       if ($key !== false) {
  //         $variables['#access'] = TRUE;
  //       } else {
  //         $variables['content'] = [];
  //       }
  //   }
  // }

  $variables['base_path'] = base_path();
  // $variables['page_type__class'] = 'page';
  // $url = \Drupal\Core\Url::fromRoute('<current>');
  // $path = $url->getInternalPath();
  // if (strpos($path, 'group') !== FALSE) {
  //   $variables['page_type__class'] = 'is_group_page';
  // }
  $login_url = \Drupal\Core\Url::fromRoute('user.login')->toString();
  // Pass the login URL to the template
  $variables['user_login_path'] = $login_url;

  $themeHandler = \Drupal::service('theme_handler');
  $themePath = $themeHandler->getTheme($themeHandler->getDefault())->getPath();
  $variables['themePath'] = $themePath;
  // $variables['page'] = $variables['html']['page'];
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  if($variables['plugin_id'] == 'inline_block:houses_sliders'){
    $group_storage = \Drupal::entityTypeManager()->getStorage('group');
    $group_ids = $group_storage->getQuery()->accessCheck(false)->execute();
    $groups = Group::loadMultiple($group_ids);
    // Sort groups alphabetically by title
    usort($groups, function ($a, $b) {
      // Get titles of the groups
      $title_a = $a->label(); // 'label' is the function to get the group title.
      $title_b = $b->label();

      // Compare titles alphabetically (case-insensitive)
      return strcasecmp($title_a, $title_b);
    });
    $groups_html = '';

    foreach ($groups as $group) {
      $description = $group->get('field_description')->value ?
    preg_replace('/\s+/', ' ', trim(html_entity_decode(strip_tags($group->get('field_description')->value)))) : '';

      // if($group->id() == 1){
      // }
      $number_of_members = $group->get('field_number_of_residents')->value ? $group->get('field_number_of_residents')->value.' residents' : '';
      $file_path = $image_alt = $image_title ='';
      if($group->get('field_image')){
        if($group->get('field_image')->entity){
          if($group->get('field_image')->entity->field_media_image){
            $image_alt = $group->get('field_image')->entity->field_media_image->getValue()[0]['alt'];
            $image_title = $group->get('field_image')->entity->field_media_image->getValue()[0]['title'];
            $file = File::load($group->get('field_image')->entity->field_media_image->getValue()[0]['target_id']);
            $file_path = $file->createFileUrl();
          }
        }
      }
      $group_tags = $group->get('field_community')->value;
      $tags = $group_tags.' '.$number_of_members;
      if(!empty($group_tags) && !empty($number_of_members)){
        $tags = $group_tags.', '.$number_of_members;
      }


      $group_path = '/group/' . $group->id();
      $alias_manager = \Drupal::service('path_alias.manager');
      $url = $alias_manager->getAliasByPath($group_path);
      $groups_html .= '<div class="offer-slider-block" data-group="'.$group->get('field_house_machine_name')->value.'">'.
                          '<div class="program-card"><a href="'.$url.'"></a>'.
                              '<div class="program-card-img">'.
                                '<img src="'.$file_path.'" alt="'.$image_alt.'" title="'.$image_title.'">'.
                              '</div>'.
                              '<div class="program-card-info">'.
                                  '<h4>'.$group->label().'</h4>'.
                                  '<div class="tags">'.
                                      '<p>'.$tags.'</p>'.
                                '</div>'.
                                  '<p>'.$description.'</p>'.
                                  '<svg width="27" height="30" viewBox="0 0 27 30" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0 14.6816H24.5156" stroke="#011F5B" stroke-width="1.94183"></path><path d="M14.3203 4L25.0004 14.4373L14.3203 25.1174" stroke="#011F5B" stroke-width="1.94183"></path></svg>'.
                                      '</svg>'.
                              '</div>'.
                          '</div>'.
                      '</div>';
    }
    $variables['all_group_houses'] = $groups_html;
  }

  /**
   * Fetch all blocks of a specific block type.
   */
  $block_type = 'dashboard_basic_block'; // Replace with your custom block type machine name.
  $block_content = \Drupal::entityTypeManager()
    ->getStorage('block_content')
    ->loadByProperties(['type' => $block_type]);
    // Loop through the blocks and get content.
    foreach ($block_content as $block) {
      
      // You can access fields like this:
    $field_value = $block->get('info')->value; // Replace 'field_name' with your field machine name.

    
    // Or render the entire content for a block.
    $content = \Drupal::entityTypeManager()
      ->getViewBuilder('block_content')
      ->accessCheck(false)
      ->view($block);

    // Do something with the content, e.g., return or output.
    // $content is a render array that can be passed to a theme function or rendered directly.
  }
  $renderer = \Drupal::service('renderer');
  $html_content = $renderer->render($content);
  $variables['all_dashboard_basic_block'] = $html_content;

}

function penchas_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  $themeHandler = \Drupal::service('theme_handler');
  $themePath = $themeHandler->getTheme($themeHandler->getDefault())->getPath();

  // dd($javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']);
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['scope'] = 'footer';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['group'] = -100;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['type'] = 'file';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['data'] = $themePath . '/js/tbcustom.js';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['version'] = '1.x';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['minified'] = '';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['weight'] =  0.079;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['cache'] = 1;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['preprocess'] = 1;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['attributes'] = array();
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['browsers'] = array();
}

function penchas_css_alter(&$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {

  // Remove defaults.css file.
  // unset($css['https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/css/font-awesome.min.css']);
  // unset($css['modules/contrib/tb_megamenu/css/tb_megamenu.default.css']);
  // unset($css['modules/contrib/tb_megamenu/css/tb_megamenu.bootstrap.css']);

}

// function penchas_breadcrumb($variables) {
//   $breadcrumb = $variables['breadcrumb'];
//   if (!empty($breadcrumb)) {
//     // Adding the title of the current page to the breadcrumb.
//     $breadcrumb[] = drupal_get_title();

//     // Provide a navigational heading to give context for breadcrumb links to
//     // screen-reader users. Make the heading invisible with .element-invisible.
//     $output = '<h2 class="element-invisible">' . t('You are here') . '</h2>';

//     $output .= '<div class="breadcrumb">' . implode(' » ', $breadcrumb) . '</div>';
//     return $output;
//   }
// }

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function penchas_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  if (isset($variables['view']->element['#view_id'])) {
    $suggestions[] = 'views_view__' . $variables['view']->element['#view_id'];
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function penchas_preprocess_views_view(&$variables) {
  $variables['base_path'] = base_path();
  $variables['breadcrumb_home'] = 'HOME';
  $variables['breadcrumb_dashboard'] = 'Dashboard';
  $variables['breadcrumb_dashboard_link'] = '/user';
  $current_user = \Drupal::currentUser();
  $variables['breadcrumb_reports'] = 'Reports';
  $variables['breadcrumb_reports_link'] = "/dashboard/reports";
  $view = $variables['view'];
  $variables['title'] = $view->getTitle();
  $id = $view->storage->id();
  if($id == 'team_members'){
    $variables['display_id'] = $view->current_display;
    // dd($view);
    $team_filters_arr = '';
    $selected_filters = [];
    $values = $view->getExposedInput();
    // dd($values);
    $team_filters = [];
    foreach ($view->filter as $filter) {
      if($filter->isExposed()) {
        $team_filters[] = $filter->options;
      }
    }
    // Get the path of the view page
    $path = $view->getDisplay()->getPath();

    if(!empty($team_filters)){
      if(!empty($team_filters[0]['value'])){
        foreach ($team_filters[0]['value'] as $key => $team_filter) {
          if($key != 'all'){
            $team_filters_arr .= '<li class="nav-item" role="presentation">
                  <a class="nav-link active" href="/'.$path.'?field_type_value='.$key.'">'.$team_filter.'</a>
                </li>';
          }
        }
      }
      $team_filters_output = '<div class="tab-outer"><ul class="nav nav-tabs" id="myTab" role="tablist">'.$team_filters_arr.'</ul></div>';
    }
    $variables['team_filters'] = $team_filters_output;
  }
  if($id == 'group_houses'){
    $selected_filters = [];
    $values = $view->getExposedInput();
    $filters = [];
    foreach ($view->filter as $filter) {
      if($filter->isExposed()) {
        $filters[] = $filter->options;
      }
    }

    $filters_html = '';
    if(!empty($values)){
      $community = ($values['field_community_value'] ? $values['field_community_value'] : 'All');
      $selected_filters['field_community'] = $community;
      if(isset($values['field_number_of_residents_value']) && $values['field_number_of_residents_value'] != 'All'){
        $variables['size'] = $values['field_number_of_residents_value'];
      }else{
        $variables['size'] = 'All';
      }
      $variables['operator'] = ( $values['field_number_of_residents_value_1_op'] ?  $values['field_number_of_residents_value_1_op'] : '<');
      $residents_arr_ = $values['field_number_of_residents_value_1'];
      $small_size_value = ($residents_arr_['value'] ? $residents_arr_['value'] : '');
      $small_size_min = ($residents_arr_['min'] ? $residents_arr_['min'] : '');
      $small_size_max = ($residents_arr_['max'] ? $residents_arr_['max'] : '');

      $size = 'All';
      $operator = '>';
      // params condition : (Small: <300; Medium: 301<>600; Large >600)
      $min = $max = $value = '';
      if($variables['size'] == 1){
        $selected_filters['size'] = 'Small < 300';
        $size = '1';
        $operator = '<=';
        $value = 300;
      }else if($variables['size'] == 2){
        $size = '2';
        $operator = 'between';
        $min = 300;
        $max = 600;
        $selected_filters['size'] = 'Medium 301<>600';
      }else if($variables['size'] == 3){
        $size = '3';
        $operator = '>';
        $value = 600;
        $selected_filters['size'] = 'Large >600';
      }

      $link = '/all-college-houses?field_community_value='.$community.'&field_number_of_residents_value='.$size.'&field_number_of_residents_value_1_op='.$operator.'&field_number_of_residents_value_1%5Bvalue%5D='.$value.'&field_number_of_residents_value_1%5Bmin%5D='.$min.'&field_number_of_residents_value_1%5Bmax%5D='.$max;
      $link = '/all-college-houses';
      // dump($link);
      if(!empty($selected_filters) && isset($selected_filters['field_community'])){
        $filters_html .= '<a href="'.$link.'"><span class="filter-tag">'.$selected_filters['field_community'].'</span></a>';
      }
      if(!empty($selected_filters) && isset($selected_filters['size'])){
        $filter_size = $selected_filters['size'];
        $filters_html .= '<a href="'.$link.'"><span class="filter-tag">'.$filter_size.'</span></a>';
      }
    }
    $variables['selected_filters_output'] = $filters_html;
  }
}

