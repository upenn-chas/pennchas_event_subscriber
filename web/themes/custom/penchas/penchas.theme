<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\Group;
// use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\NodeType;
use Drupal\Core\Database\Database;
use Drupal\node\NodeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\user\Entity\User;
use Drupal\group\Entity\GroupMembership;
use Drupal\group\Entity\GroupRole;
use Drupal\group\GroupManager;
use Drupal\node\Entity\Node;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\GroupMembershipInterface;
use Drupal\group\Access\GroupPermissionHandlerInterface;


/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function penchas_form_system_theme_settings_alter(&$form, FormStateInterface $form_state)
{
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
}
function process_submenu($submenu)
{
  $submenu_items = '';

  foreach ($submenu as $item) {
    $submenu_items .= '<li class="navigation__item nav-item">';
    $submenu_items .= '<a href="' . $item->link->getUrlObject()->toString() . '" class="nav-link nav-link--">' . $item->link->getTitle() . '</a>';
    $submenu_items .= '</li>';
  }

  return $submenu_items;
}

/**
 * Implements hook_preprocess_HOOK() for container templates.
 */
function penchas_preprocess_container(array &$variables)
{
  // Add a custom class to the container.
  $current_path = \Drupal::service('path.current')->getPath();
  $path_parts = explode('/', trim($current_path, '/'));
  if (isset($path_parts[0]) && $path_parts[0] === 'group' && isset($path_parts[1])) {
    if (strpos($path_parts[2], 'calendar') !== false) {
      $variables['attributes']['class'] = 'full-container';
    }
  }
}


function penchas_preprocess_node_edit_form(&$variables)
{
  $variables['base_path'] = base_path();
  $group_banner_html = '<br/>';
  $current_path = \Drupal::service('path.current')->getPath();
  $path_parts = explode('/', trim($current_path, '/'));

  if (isset($path_parts[0]) && $path_parts[0] === 'group' && isset($path_parts[1])) {
    if (strpos($path_parts[2], 'group_node') !== false) {
      $bundle_type = str_replace('group_node:', '', $path_parts[2]);

      if ($bundle_type == 'reserve_room' || $bundle_type == 'room' || $bundle_type == 'chas_event' || $bundle_type == 'notices' || $bundle_type == 'article') {
        if ($bundle_type == 'reserve_room') {
          $label = "Room Reservations";
        } else if ($bundle_type == 'room') {
          $label = "Room";
        } else if ($bundle_type == 'chas_event') {
          $label = "CHAS Event";
        } else if ($bundle_type == 'notices') {
          $label = "Notices";
        } else if ($bundle_type == 'article') {
          $label = "Article";
        }
        $group_id = $path_parts[1];
        if ($group_id) {
          $groupData = Group::load($group_id);
          $url_path = $groupData->toUrl()->toString();
          $field_bg_color = $groupData->get('field_color')->value;
          $field_color_of_circle = $groupData->get('field_color_of_circle')->value;
          $field_menus = $groupData->get('field_menus');
          $simplified_menu_html = '';
          foreach ($field_menus as $key => $group_menu) {

            // Load the menu using the menu_link_tree service
            $menu_tree = \Drupal::service('menu.link_tree');
            $menu_name = $group_menu->target_id;

            // Fetch the menu tree data
            $menu_data = $menu_tree->load($menu_name, new MenuTreeParameters());

            foreach ($menu_data as $item) {
              $simplified_menu_html .= '<div class="dropdown">';
              $simplified_menu_html .= '<a class="btn btn-secondary dropdown-toggle" >' . $item->link->getTitle() . '</a>';
              $simplified_menu_html .= '<div class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButton2">
                    <ul class="clearfix nav">';
              $simplified_menu_html .= process_submenu($item->subtree);

              $simplified_menu_html .= '</ul></div></div>';
            }
          }
          $field_heading = $groupData->get('field_heading')->value;

          $group_label = $groupData->get('label')->value;
          $group_banner_html = '<section class="hero-banner without-image" style="background-color: #' . $field_bg_color . ';">'
            . '<style>.hero-banner .container:before {background: #' . $field_color_of_circle . '}</style>'
            . '<div class="container">'
            . '<div class="row">'
            . '<div class="col-12 col-lg-6">'
            . '<div class="breadcrumbs-block">'
            . '<nav aria-label="breadcrumb">'
            . '<ol class="breadcrumb">'
            . '<li class="breadcrumb-item"><a href="/">Home</a></li>'
            . '<li class="breadcrumb-item"><a href="' . $url_path . '">' . $group_label . ' House</a></li>'
            . '<li class="breadcrumb-item active" aria-current="page">' . $label . '</li>'
            . ' </ol>'
            . '</nav>'
            . '</div>'
            . '<div class="banner-info">'
            . '<h1>' . $label . '</h1>'
            . '</div>'
            . '<div class="internal-links">' . $simplified_menu_html . '</div>'
            . '</div>'
            . '</div>'
            . '</div>'
            . '</section>';
        }
      }
    }
  }

  $variables['group_banner_info'] = $group_banner_html;
}
function penchas_preprocess_node(&$variables)
{
  $variables['base_path'] = base_path();
  $variables['house_string'] = 'house';
  $variables['breadcrumb_home'] = 'HOME';
  $variables['breadcrumb_dashboard'] = 'Dashboard';
  $variables['breadcrumb_dashboard_link'] = '/dashboard';
  $variables['primary_color'] = '#ffea3f';
  $variables['room_reservation_heading'] = 'My Room Reservations';
  $current_user = \Drupal::currentUser();
  $edit_link = '';

  $variables['breadcrumbs_list'] = '';
  $variables['page_breadcrumbs_list'] = '';
  $node = \Drupal::routeMatch()->getParameter('node');
  $base_url = base_path();
  /* Node Meta tag updates */
  $connection = Database::getConnection();
  $url_generator = \Drupal::service('url_generator');
  $front_page_path = \Drupal::request()->getSchemeAndHttpHost() . $url_generator->generateFromRoute('<front>');

  if ($node instanceof NodeInterface) {

    $node = $variables['node'];
    $variables['node_full_URL'] = $node->toUrl()->toString(); 
    // dd($variables['node_full_URL']);
    if ($node->bundle() == 'chas_event') {
      $calendar_link = base_path();
      if ($current_user->isAuthenticated()) {
        $moderator_link = '';
        $eventHouseId = (int) $node->get('field_location')->getString();
        $group = Group::load($eventHouseId);
        $eventHousename = $group->get('field_short_name')->value;
        $housesId = [$eventHousename];
        if (count($housesId) == 1) {
          $calendar_link = base_path() . 'group/' . $eventHousename . '/calendar';
        } else {
          // $connection = Database::getConnection();
          // $query = $connection->select('group_relationship_field_data', 'gr')
          //     ->fields('gr', ['id'])
          //     ->condition('entity_id', $current_user->id(), '=')
          //     ->condition('plugin_id', 'group_membership', '=');
          // $results = $query->execute()->fetchAll();
          // if(!empty($results)){

          // }
        }
        $variables['is_logged_in'] = TRUE;
        $variables['attributes']['class'][] = 'logged-in-user';
        $edit_link = '';
        if ($node->access('update')) {
          $edit_url = Url::fromRoute('entity.node.edit_form', ['node' => $node->id()]);
          $node_edit_url = $edit_url->toString();
          $edit_link = '<li><a href="' . $node_edit_url . '"><img src="' . base_path() . 'themes/custom/penchas/assets/images/edit.svg"> Edit</a></li>';
        }

        if ($node->get('moderation_state')) {
          $moderationState = $node->get('moderation_state')->value;
          if (($moderationState === 'draft' || $moderationState === 'pending') && \Drupal::service('pennchas_common.moderator_access_check')->checkForEntity($node)) {;
            $moderator_url = Url::fromRoute('view.event_moderation_view.event_moderate_page_view', ['node' => $node->id()])->toString();
            $moderator_link = '<li><a href="' . $moderator_url . '"><img src="' . base_path() . 'themes/custom/penchas/assets/images/gear.svg"> Moderate</a></li>';
          }
        }
        $edit_link .= $moderator_link;
      }
      $variables['breadcrumbs_list'] = '<div class="event-details-breadcrumbs"><div class="event-breadcrumbs"><ul><li><a href="' . $calendar_link . '"><img src="' . base_path() . 'themes/custom/penchas/assets/images/back-arrow.svg"> Back to Calendar</a></li>' . $edit_link . '</ul></div></div>';
    }

    $node_url = $node->toUrl()->toString(); // Used multiple times
    // Initialize variables for breadcrumbs
    $breadcrumbs = '';

    // Check for specific content types
    if (in_array($node->bundle(), ['page', 'house_landing_page'])) {
        // Extract breadcrumb values
        $url_array = explode('/', $node_url);
        $url_array = array_filter($url_array, function($value) {
          return $value !== "";
        });
        if(count($url_array) > 1){
          
          // dd($url_array);
          // Collect all path aliases at once (instead of querying for each part of the breadcrumb)
          $alias_conditions = array_map(function ($breadcrumb_value) {
              return '/'.$breadcrumb_value;
          }, array_filter($url_array)); // Avoid empty values
          if (!empty($alias_conditions)) {
              // Perform a single query for all breadcrumb alias conditions
              $query = $connection->select('path_alias', 'pa')
                  ->fields('pa', ['path', 'alias'])
                  ->condition('pa.alias', $alias_conditions, 'IN')
                  ->execute();

              // Store results in an associative array for quick lookup
              $path_aliases = [];
              foreach ($query as $result) {
                  $path_aliases[$result->alias] = $result->path;
              }

              // Loop through the breadcrumb values and generate breadcrumb items
              foreach ($url_array as $breadcrumb_value) {
                  if (empty($breadcrumb_value)) {
                      continue;
                  }

                  $alias = '/' . $breadcrumb_value;
                  if (isset($path_aliases[$alias])) {
                      $node_path = $path_aliases[$alias];

                      if (strpos($node_path, '/group') !== false) {
                          $group_id = str_replace('/group/', '', $node_path);
                          $group_name = get_group_label($group_id);
                          $breadcrumbs .= '<li class="breadcrumb-item"><a href="' . $front_page_path . $node_path . '">' . $group_name . '</a></li>';
                      }

                      if (strpos($node_path, '/node/') !== false) {
                          $node_id = str_replace('/node/', '', $node_path);
                          $node_parent_label = get_node_title($node_id);
                          $breadcrumbs .= '<li class="breadcrumb-item"><a href="' . $front_page_path . $node_path . '">' . $node_parent_label . '</a></li>';
                      }
                  }
              }
          }
        }

        // Save the generated breadcrumbs to the variables
        $variables['page_breadcrumbs_list'] = $breadcrumbs;
    }

    // Save the node title for later use
    $variables['node_title'] = $node->getTitle();
  }
}
/**
 * Helper function to get the group ID based on node
 */
function get_group_id_by_node($node)
{
  $query = \Drupal::database()->select('group_relationship_field_data', 'g')
    ->fields('g', ['gid'])
    ->condition('g.entity_id', $node->id())
    ->execute();

  $result = $query->fetchObject();
  return $result ? $result->gid : NULL;
}

/**
 * Helper function to get the Node title based on Node ID
 */
function get_node_title($node_id)
{
  $query = \Drupal::database()->select('node_field_data', 'n')
    ->fields('n', ['title'])
    ->condition('n.nid', $node_id)
    ->execute();
    $node_result = $query->fetchObject();
  return $node_result ? $node_result->title : NULL;
}

/**
 * Helper function to get the group label based on group ID
 */
function get_group_label($group_id)
{
  $query = \Drupal::database()->select('groups_field_data', 'gm')
    ->fields('gm', ['label'])
    ->condition('gm.id', $group_id)
    ->execute();

  $gm_result = $query->fetchObject();
  return $gm_result ? $gm_result->label : NULL;
}

function penchas_preprocess_html(&$variables)
{
  /* Node Meta tag updates  */
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof NodeInterface) {
    // Get site name and node title once
    $site_name = \Drupal::config('system.site')->get('name');
    $node_title = $node->getTitle();
    $variables['node_title'] = $node_title;
    $node_meta_title = $node_title . ' | ' . $site_name;
    //dump($node_meta_title);
    // Define bundles that require group information
    $bundles_with_groups = ['program_community', 'article', 'reserve_room', 'room'];

    // If node is of a relevant bundle, process the group relationship
    if (in_array($node->bundle(), $bundles_with_groups)) {
      // Get the associated group ID
      $group_id = get_group_id_by_node($node);
      if ($group_id) {
        // Get group label and update meta title
        $group_machine_name = get_group_label($group_id);
        if ($group_machine_name) {
          $node_meta_title = $node_title . ' | ' . $group_machine_name . ' | ' . $site_name;
        }
      }
    }

    // Special handling for 'house_landing_page' bundle
    if ($node->bundle() === 'house_landing_page') {
      $parent_house_id = (int) $node->get('field_select_house')->target_id;
      $group_machine_name = get_group_label($parent_house_id);
      if ($group_machine_name) {
        $node_meta_title = $node_title . ' | ' . $group_machine_name . ' | ' . $site_name;
      }
    }

    // Special handling for 'chas_event' and 'notices' bundles
    if ($node->bundle() == 'notices') {
      $event_house_id = $node->get('field_groups')->getString();
      $event_house_ids = explode(',', $event_house_id);
      if (count($event_house_ids) == 1) {
        $group_machine_name = get_group_label($event_house_id);
        if ($group_machine_name) {
          $node_meta_title = $node_title . ' | ' . $group_machine_name . ' | ' . $site_name;
        }
      }
    }

    // Special handling for 'chas_event' and 'notices' bundles
    if ($node->bundle() == 'chas_event') {
      $eventHousesId = $node->get('field_groups')->getValue();
      if (count($eventHousesId) == 1) {
        // $event_house_id = (int) $node->get('field_location')->getString();
        // $housesId = [$event_house_id];
        $group_machine_name = get_group_label($eventHousesId[0]['target_id']);
        if ($group_machine_name) {
          $node_meta_title = $node_title . ' | ' . $group_machine_name . ' | ' . $site_name;
        }
      }
    }

    // Assign the refined title to the head_title
    $variables['head_title']['title'] = $node_meta_title;
  }


  /* Node Meta tag updates ends here  */

  $variables['base_path'] = base_path();
  $variables['breadcrumb_home'] = 'HOME';
  $url = \Drupal::service('url_generator')->generateFromRoute('<front>');
  $front_page_path = \Drupal::request()->getSchemeAndHttpHost() . $url;
  $variables['front_page_url'] = $front_page_path;
  $current_uri = \Drupal::request()->getRequestUri();

  /* SAML resposne testing starts */
  // if($current_uri == '/all-college-houses'){

  //   // Initialize an array to store the results.
  //   $group_roles_target_ids = [];
  //   $connection = Database::getConnection();
  //   $current_user = \Drupal::currentUser();
  //   $uid = $current_user->id(); 
  //   $user = \Drupal\user\Entity\User::load($uid);
  //   $personentitlement_values = $user->get('field_edu_person_entitlement')->value;
  //   $personentitlement = explode(", ", $personentitlement_values);
  //   // foreach ($result as $row) {
  //   //   $group_roles_target_ids[] = $row->group_roles_target_id;  // Collect the 'group_roles_target_id' values.
  //   // }
  //   $query = \Drupal::entityQuery('group_role');
  //   $role_ids = $query->execute();
  //   $group_roles = GroupRole::loadMultiple($role_ids);
  //   foreach ($group_roles as $role) {
  //     $group_roles_target_ids[] = $role->id();
  //   }

  //   $query = \Drupal::entityQuery('user_role');
  //   $role_ids = $query->execute();
  //   $drupal_user_roles = \Drupal\user\Entity\Role::loadMultiple($role_ids);
  //   foreach ($drupal_user_roles as $role) {
  //     $drupal_user_roles[] = $role->id();
  //   }

  //   // get all groups IDs by machine names
  //   $group_machine_name_query = \Drupal::database()->select('group__field_house_machine_name', 'gfh')
  //   ->fields('gfh', ['entity_id', 'field_house_machine_name_value']);
  //   $gf_result = $group_machine_name_query->execute()->fetchAll();
  //   $groups_data = [];
  //   foreach ($gf_result as $row) {
  //     $groups_data[$row->field_house_machine_name_value] = $row->entity_id;  // Collect the 'group_roles_target_id' values.
  //   }

  //   // $personentitlement = [
  //   //   "0" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.campus_partner",
  //   //   "1" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.ra",
  //   //   "2" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.house_coordinator",
  //   //   "3" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.student.Harnwell_CH",
  //   //   "4" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.student.Gregory_CH",
  //   //   "5" => "urn.mac.upen.edu.pen.isc.alt.apps.wps.chas.student.chas_technology"
  //   // ];
  //   // dd($personentitlement);
  //   foreach ($personentitlement as $row => $value) {
  //     $array = explode('.', $value);
  //     $last_string = end($array);
  //     // Asign that user into group
  //     if (array_key_exists($last_string, $groups_data)) {
  //       $group_ids[] = $groups_data[$last_string];
  //     }
  //     if (in_array($last_string, $drupal_user_roles)) {
  //       $drupal_user_roles_ids[] = $last_string;
  //     }
  //     if (in_array('house1-' . $last_string, $group_roles_target_ids)) {
  //       $group_user_roles_ids[] = $last_string;
  //     }
  //   }
  //   if (isset($group_ids)) {
  //     foreach ($group_ids as $key => $group_id) {
  //       if(isset($group_user_roles_ids)){
  //         foreach ($group_user_roles_ids as $gr_key => $group_user_roles_id) {
  //           $query = \Drupal::database()->select('group_relationship_field_data', 'gr');
  //           $query->fields('gr');
  //           $query->condition('gr.entity_id', $uid);
  //           $query->condition('gr.gid', $group_id); 
  //           $group_results = $query->execute()->fetchObject();
  //           if(!empty($group_results)){
  //             if($group_results->plugin_id == 'group_membership'){
  //               $groupData = Group::load($group_id);
  //               if ($groupData->getMember($user)) {
  //                 $groupData->removeMember($user);

  //                 $values = ['group_roles' => []];
  //                 foreach ($group_user_roles_ids as $role_id) {
  //                     // Add each role to the group member
  //                     $values['group_roles'][] = 'house1-' . $role_id;
  //                 }
  //                 if (!$groupData->getMember($user)) {
  //                   $groupData->addMember($user, $values);
  //                 }
  //               }
  //             }
  //           }else{
  //             // $values = ['group_roles' => 'house1-'.$group_user_roles_id];
  //             $values = ['group_roles' => []];  
  //             foreach ($group_user_roles_ids as $role_id) {
  //                 // Add each role to the group member
  //                 $values['group_roles'][] = 'house1-' . $role_id;
  //             }
  //             $groupData = Group::load($group_id);
  //             if (!$groupData->getMember($user)) {
  //               $groupData->addMember($user, $values);
  //             }

  //           }

  //           if ($user) {
  //             foreach ($drupal_user_roles_ids as $role) {
  //               if (!$user->hasRole($role)) {
  //                 $user->addRole($role);
  //               }
  //             }
  //             $user->save();
  //           }
  //         }
  //       }
  //     }
  //   }
  // }

  /* SAML resposne testing ends */
}

function penchas_preprocess_page(&$variables)
{
  $base_url = base_path();
  /* Node Meta tag updates  */
  $node = \Drupal::routeMatch()->getParameter('node');
  
  if ($node instanceof NodeInterface) {
    $node = $variables['node'];
    
    $node_title = $node->getTitle();
    $variables['node_title'] = $node_title;
  }
}
function penchas_preprocess_block(&$variables)
{

  $route_name = \Drupal::routeMatch()->getRouteName();

  // Check if we are on a node page (e.g., node/[nid]).
  if (strpos($route_name, 'entity.node.canonical') !== FALSE) {
    // Get the current node object.
    $node = \Drupal::routeMatch()->getParameter('node');
    // Check if the node exists and is an instance of the Node class.
    if ($node && $node instanceof \Drupal\node\NodeInterface) {
      $node_title = $node->getTitle();
      if ($node->bundle() == 'reserve_room' || $node->bundle() == 'chas_event') {
        if ($node->get('field_event_schedule')->getValue()) {
          $node_event_schedule = $node->get('field_event_schedule')->getValue();
          $node_start_date = $node_event_schedule[0]['value'];
          $node_end_date = $node_event_schedule[0]['end_value'];
        }
        // Get the node URL.
        $node_url = $node->toUrl()->toString();
        $variables['add_to_calendar_link'] = 'https://www.google.com/calendar/render?action=TEMPLATE&text=' . $node_title . '&dates=' . date('YmjThms', $node_start_date) . '/' . date('YmjThms', $node_end_date);
      }
    }
  }

  $connection = Database::getConnection();
  // $variables['node_current_url'] = FALSE;
  $variables['dashboard_access'] = FALSE;
  // Check if the block is the specific inline block we want to target.
  // if ($variables['plugin_id'] === 'inline_block:dashboard_blocks') {
  //   $field_values = $variables['content']['field_block_display_condition_wi'];

  //   // $block_content = BlockContent::load($block_content_id);
  //   if (!isset($field_values['#items'])) {
  //     // If there are no field values, stop further processing.
  //     return;
  //   }

  //     $group_roles_arr = [];
  //     $group_conditions = $variables['content']['#block_content']->get('field_block_display_condition_wi')->getValue();
  //     foreach ($group_conditions as $value) {
  //       $group_roles_arr[] = $value['target_id'];
  //     }
  //     $variables['dashboard_access'] = TRUE;

  //     // // Load the current user.
  //     $current_user = \Drupal::currentUser();
  //     // $user_entity = \Drupal\user\Entity\User::load($current_user->id());
  //     // // dd($user_entity);

  //     $query = $connection->select('group_relationship_field_data', 'gr')
  //     ->fields('gr', ['id'])
  //     ->condition('entity_id', $current_user->id(), '=')
  //     ->condition('plugin_id', 'group_membership', '=');

  //     // // Execute the query and fetch all results as an associative array.
  //     $results = $query->execute()->fetchAssoc('id');
  //     // dump($results);
  //   if(!$results){
  //     if(!empty($results['id'])){
  //       $current_user_role_id = $results['id'];
  //       $query = $connection->select('group_relationship__group_roles', 'grr')
  //       ->fields('grr', ['group_roles_target_id'])
  //       ->condition('entity_id', $current_user_role_id, '=');
  //       $group_roles_results = $query->execute()->fetchAssoc('group_roles_target_id');
  //       if(!empty($group_roles_results)){
  //         $group_role = $group_roles_results['group_roles_target_id'];
  //         $variables['content'] = [];

  //       }
  //     }
  //   }
  //   if (!$user_entity) {
  //     // No user entity, so do not show the block.
  //     $variables['#access'] = FALSE;
  //     return;
  //   }

  //   if(!empty($group_role)){
  //       $key = array_search($group_role, $group_roles_arr);
  //       if ($key !== false) {
  //         $variables['#access'] = TRUE;
  //       } else {
  //         $variables['content'] = [];
  //       }
  //   }
  // }

  $variables['base_path'] = base_path();
  $login_url = \Drupal\Core\Url::fromRoute('user.login')->toString();
  // Pass the login URL to the template
  $variables['user_login_path'] = $login_url;

  $themeHandler = \Drupal::service('theme_handler');
  $themePath = $themeHandler->getTheme($themeHandler->getDefault())->getPath();
  $variables['themePath'] = $themePath;
  // $variables['page'] = $variables['html']['page'];
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  if ($variables['plugin_id'] == 'inline_block:houses_sliders') {
    $group_storage = \Drupal::entityTypeManager()->getStorage('group');
    $group_ids = $group_storage->getQuery()->accessCheck(false)->execute();
    $groups = Group::loadMultiple($group_ids);
    // Sort groups alphabetically by title
    usort($groups, function ($a, $b) {
      // Get titles of the groups
      $title_a = $a->label(); // 'label' is the function to get the group title.
      $title_b = $b->label();

      // Compare titles alphabetically (case-insensitive)
      return strcasecmp($title_a, $title_b);
    });
    $groups_html = '';

    foreach ($groups as $group) {
      $description = $group->get('field_description')->value ?
        preg_replace('/\s+/', ' ', trim(html_entity_decode(strip_tags($group->get('field_description')->value)))) : '';

      // if($group->id() == 1){
      // }
      $number_of_members = $group->get('field_number_of_residents')->value ? $group->get('field_number_of_residents')->value . ' residents' : '';
      $file_path = $image_alt = $image_title = '';
      if ($group->get('field_image')) {
        if ($group->get('field_image')->entity) {
          if ($group->get('field_image')->entity->field_media_image) {
            $image_alt = $group->get('field_image')->entity->field_media_image->getValue()[0]['alt'];
            $image_title = $group->get('field_image')->entity->field_media_image->getValue()[0]['title'];
            $file = File::load($group->get('field_image')->entity->field_media_image->getValue()[0]['target_id']);
            $file_path = $file->createFileUrl();
          }
        }
      }
      $group_tags = $group->get('field_community')->value;
      $tags = $group_tags . ' ' . $number_of_members;
      if (!empty($group_tags) && !empty($number_of_members)) {
        $tags = $group_tags . ', ' . $number_of_members;
      }


      $group_path = '/group/' . $group->id();
      $alias_manager = \Drupal::service('path_alias.manager');
      $url = $alias_manager->getAliasByPath($group_path);
      $groups_html .= '<div class="offer-slider-block" data-group="' . $group->get('field_short_name')->value . '">' .
        '<div class="program-card"><a href="' . $url . '"></a>' .
        '<div class="program-card-img">' .
        '<img src="' . $file_path . '" alt="' . $image_alt . '" title="' . $image_title . '">' .
        '</div>' .
        '<div class="program-card-info">' .
        '<h4>' . $group->label() . '</h4>' .
        '<div class="tags">' .
        '<p>' . $tags . '</p>' .
        '</div>' .
        '<p>' . $description . '</p>' .
        '<svg width="27" height="30" viewBox="0 0 27 30" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0 14.6816H24.5156" stroke="#011F5B" stroke-width="1.94183"></path><path d="M14.3203 4L25.0004 14.4373L14.3203 25.1174" stroke="#011F5B" stroke-width="1.94183"></path></svg>' .
        '</svg>' .
        '</div>' .
        '</div>' .
        '</div>';
    }
    $variables['all_group_houses'] = $groups_html;
  }

  /**
   * Fetch all blocks of a specific block type.
   */
  $block_type = 'dashboard_basic_block'; // Replace with your custom block type machine name.
  $block_content = \Drupal::entityTypeManager()
    ->getStorage('block_content')
    ->loadByProperties(['type' => $block_type]);
  // Loop through the blocks and get content.
  foreach ($block_content as $block) {

    // You can access fields like this:
    $field_value = $block->get('info')->value; // Replace 'field_name' with your field machine name.


    // Or render the entire content for a block.
    $content = \Drupal::entityTypeManager()
      ->getViewBuilder('block_content')
      ->accessCheck(false)
      ->view($block);

    // Do something with the content, e.g., return or output.
    // $content is a render array that can be passed to a theme function or rendered directly.
  }
  $renderer = \Drupal::service('renderer');
  $html_content = $renderer->render($content);
  $variables['all_dashboard_basic_block'] = $html_content;
}

function penchas_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets)
{
  $themeHandler = \Drupal::service('theme_handler');
  $themePath = $themeHandler->getTheme($themeHandler->getDefault())->getPath();
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['scope'] = 'footer';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['group'] = -100;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['type'] = 'file';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['data'] = $themePath . '/js/tbcustom.js';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['version'] = '1.x';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['minified'] = '';
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['weight'] =  0.079;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['cache'] = 1;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['preprocess'] = 1;
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['attributes'] = array();
  $javascript['modules/contrib/tb_megamenu/js/tb-megamenu-frontend.js']['browsers'] = array();
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function penchas_theme_suggestions_views_view_alter(array &$suggestions, array $variables)
{
  if (isset($variables['view']->element['#view_id'])) {
    $suggestions[] = 'views_view__' . $variables['view']->element['#view_id'];
  }
}

/**
 * Helper function to fetch group ID based on the short name.
 */
function get_group_id_by_short_name($short_name_value)
{
  $connection = Database::getConnection();
  $query = $connection->select('group__field_short_name', 'gs')
    ->fields('gs', ['entity_id'])
    ->condition('gs.field_short_name_value', $short_name_value);
  $result = $query->execute()->fetchObject();
  return $result ? $result->entity_id : NULL;
}

/**
 * Helper function to generate a URL for creating a content type in a group.
 */
function generate_create_form_url($group_id, $plugin_id)
{
  return Url::fromRoute('entity.group_relationship.create_form', [
    'group' => $group_id,
    'plugin_id' => $plugin_id,
  ])->toString();
}

// function check_user_permission_in_group($group_id, AccountInterface $user, $permission) {
//   // Load the group entity.
//   $group = Group::load($group_id);

//   // If the group does not exist, return FALSE.
//   if (!$group) {
//     return FALSE;
//   }

//   // Get the GroupPermissionHandler service.
//   $group_permission_handler = \Drupal::service('group.permissions');

//   // Check if the user has the specified permission for this group.
//   $has_permission = $group_permission_handler->getPermissions($group, $user, $permission);
//   // dd($has_permission);
//   // Return whether the user has the permission.
//   return $has_permission;
// }

/**
 * Implements hook_preprocess_views_view().
 */
function penchas_preprocess_views_view(&$variables)
{

  $user = \Drupal::currentUser();
  // Example usage: Check if the current user can create "article" content in the group.
  // $group_id = 1;  // Replace with actual group ID.
  // $permission = 'create group_node:notices entity';  // Replace with the specific permission.

  // if (check_user_permission_in_group($group_id, $user, $permission)) {
  //   dd("User has the permission: $permission in the group.");
  // } else {
  //   dd("User does NOT have the permission: $permission in the group.");
  // }
  // $route_match = \Drupal::routeMatch();
  // $groupData = $route_match->getParameter('group');
  // $variables['current_group_id'] = $groupData;

  // Check if the current view ID is either 'calendar' or 'room_reservation_calendar'.
  if (in_array($variables['id'], ['calendar', 'room_reservation_calendar'])) {
    $variables['group_id'] = $variables['view']->argument['field_short_name_value']->argument;

    if (isset($variables['group_id'])) {
      // Fetch group ID from the short name
      $group_ID = get_group_id_by_short_name($variables['group_id']);

      // If group ID is found, proceed
      $ctas = [];
      if ($group_ID) {
        // Load the group entity
        $group = Group::load($group_ID);
        $variables['add_content_ctas'] = '<br/>';

        if ($variables['id'] === 'room_reservation_calendar') {

          // Handle permission and CTA for creating 'reserve_room'
          if ($group && $group->hasPermission('create group_node:reserve_room entity', $user, $group_ID)) {
            $url = generate_create_form_url($group_ID, 'group_node:reserve_room');
            $ctas[] = '<a class="btn btn-teritory medium" href="' . $url . '">Reserve a Room</a>';
          }
        }
        // Check permissions and generate CTAs based on the group and permissions
        if ($variables['id'] === 'calendar') {

          // Handle permission and CTA for creating 'chas_event'
          if ($group && $group->hasPermission('create group_node:chas_event entity', $user, $group_ID)) {
            $url = generate_create_form_url($group_ID, 'group_node:chas_event');
            $ctas[] = '<a class="btn btn-teritory medium" href="' . $url . '">Add Event</a>';
          }

          // Handle permission and CTA for creating 'notices'
          if ($group && $group->hasPermission('create group_node:notices entity', $user, $group_ID)) {
            $url = generate_create_form_url($group_ID, 'group_node:notices');
            $ctas[] = '<a class="btn btn-teritory medium" href="' . $url . '">Add Notice</a>';
          }
        }
        // Combine all CTAs
        $variables['add_content_ctas'] .= implode('', $ctas);
      }
    }
  }

  $view = $variables['view'];
  $id = $view->storage->id();


  if ($id == 'our_team_list') {
    $exposed_filter = $view->exposed_data;
    if (isset($exposed_filter['field_user_categories_target_id'])) {
      $filter_value = reset($exposed_filter['field_user_categories_target_id']); // Get the first (and possibly only) value
      $term = Term::load($filter_value);
      if ($term) {
        // Get the name of the term
        $team_name = $term->getName();
        $variables['team_name'] = $team_name;
      }
    }
  }
  $groupData = '';

  if ($id == 'calendar' || $id == 'room_reservation_calendar' || $id == 'group_listing') {
    $current_uri = \Drupal::request()->getRequestUri();
    $uri_parts = explode('/', $current_uri);
    $uri_parts = array_filter($uri_parts);

    if (isset($uri_parts)) {
      // $variables['group_machine_label'] = $uri_parts['2'];
      $variables['short_name'] = $uri_parts['2'];
      $connection = Database::getConnection();
      $query = $connection->select('group__field_short_name', 'hm');
      $query->fields('hm', ['entity_id']);
      $query->condition('hm.field_short_name_value', $uri_parts['2']);
      $group_results = $query->execute()->fetchObject();
      $groupData = $group_results->entity_id;
    }
  }

  $variables['base_path'] = base_path();
  $variables['get_involved'] = 'Get Involved';
  $variables['house_calendar'] = 'Calendar';
  $variables['house_programs'] = 'House Programs';
  $variables['breadcrumb_home'] = 'HOME';
  $variables['breadcrumb_dashboard'] = 'Dashboard';
  $variables['breadcrumb_dashboard_link'] = '/dashboard';
  $current_user = \Drupal::currentUser();
  $variables['breadcrumb_reports'] = 'Reports';
  $variables['breadcrumb_reports_link'] = "/dashboard/reports";

  $variables['title'] = $view->getTitle();

  $id = $view->storage->id();
  // if($id == 'calendar'){
  // $variables['exclude_notices_filter'] = '<div class="js-form-item js-form-type-checkbox checkbox"><input data-drupal-selector="edit-type-exclude_notice" type="checkbox" id="edit-type-exclude-notices" name="exclude_notice" value="Exclude Notices" class="form-checkbox form-check-input"><label class="form-check-label" for="edit-type-exclude-notices">
  //     General Events/Notice</label></div>';

  if ($groupData) {
    $groupData = Group::load($groupData);
    $variables['current_group_id'] = $groupData->id();
    $url_path = $groupData->toUrl()->toString();
    $field_menus = $groupData->get('field_menus');
    $simplified_menu_html = '';
    foreach ($field_menus as $key => $group_menu) {
      // Load the menu using the menu_link_tree service
      $menu_tree = \Drupal::service('menu.link_tree');
      $menu_name = $group_menu->target_id;
      // Fetch the menu tree data
      $menu_data = $menu_tree->load($menu_name, new MenuTreeParameters());
      foreach ($menu_data as $item) {
        $simplified_menu_html .= '<div class="dropdown">';
        $simplified_menu_html .= '<a class="btn btn-secondary dropdown-toggle" >' . $item->link->getTitle() . '</a>';
        $simplified_menu_html .= '<div class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButton2">
                <ul class="clearfix nav">';
        $simplified_menu_html .= process_submenu($item->subtree);

        $simplified_menu_html .= '</ul></div></div>';
      }
    }
    $variables['current_group_label'] = $groupData->get('label')->value;
    $variables['current_group_circle_color'] = $groupData->get('field_color_of_circle')->value;
    $variables['current_group_bg_color'] = $groupData->get('field_color')->value;
    $variables['simplified_menu_html'] = '<div class="internal-links">' . $simplified_menu_html . '</div>';
  }
  // }
  if ($id == 'team_members') {
    $variables['display_id'] = $view->current_display;
    $team_filters_arr = '';
    $selected_filters = [];
    $values = $view->getExposedInput();
    $team_filters = [];
    foreach ($view->filter as $filter) {
      if ($filter->isExposed()) {
        $team_filters[] = $filter->options;
      }
    }
    // Get the path of the view page
    $path = $view->getDisplay()->getPath();

    if (!empty($team_filters)) {
      if (!empty($team_filters[0]['value'])) {
        foreach ($team_filters[0]['value'] as $key => $team_filter) {
          if ($key != 'all') {
            $team_filters_arr .= '<li class="nav-item" role="presentation">
              <a class="nav-link active" href="/' . $path . '?field_type_value=' . $key . '">' . $team_filter . '</a></li>';
          }
        }
      }
      $team_filters_output = '<div class="tab-outer"><ul class="nav nav-tabs" id="myTab" role="tablist">' . $team_filters_arr . '</ul></div>';
    }
    $variables['team_filters'] = $team_filters_output;
  }
  if ($id == 'group_houses') {
    $selected_filters = [];
    $values = $view->getExposedInput();
    $filters = [];
    foreach ($view->filter as $filter) {
      if ($filter->isExposed()) {
        $filters[] = $filter->options;
      }
    }

    $filters_html = '';
    if (!empty($values)) {
      $view_url = $view->getUrl();
      $community = ($values['field_community_value'] ? $values['field_community_value'] : 'All');
      $selected_filters['field_community'] = $community;
      if (isset($values['field_number_of_residents_value']) && $values['field_number_of_residents_value'] != 'All') {
        $variables['size'] = $values['field_number_of_residents_value'];
      } else {
        $variables['size'] = 'All';
      }
      $variables['operator'] = ($values['field_number_of_residents_value_1_op'] ?  $values['field_number_of_residents_value_1_op'] : '<');
      $residents_arr_ = $values['field_number_of_residents_value_1'];
      $small_size_value = ($residents_arr_['value'] ? $residents_arr_['value'] : '');
      $small_size_min = ($residents_arr_['min'] ? $residents_arr_['min'] : '');
      $small_size_max = ($residents_arr_['max'] ? $residents_arr_['max'] : '');

      $size = 'All';
      $operator = '>';
      // params condition : (Small: <300; Medium: 301<>600; Large >600)
      $min = $max = $value = '';
      if ($variables['size'] == 1) {
        $selected_filters['size'] = 'Small < 300';
        $size = '1';
        $operator = '<=';
        $value = 300;
      } else if ($variables['size'] == 2) {
        $size = '2';
        $operator = 'between';
        $min = 300;
        $max = 600;
        $selected_filters['size'] = 'Medium 301<>600';
      } else if ($variables['size'] == 3) {
        $size = '3';
        $operator = '>';
        $value = 600;
        $selected_filters['size'] = 'Large >600';
      }
      $link = $view_url->toString() . '?field_community_value=' . $community . '&field_number_of_residents_value=' . $size . '&field_number_of_residents_value_1_op=' . $operator . '&field_number_of_residents_value_1%5Bvalue%5D=' . $value . '&field_number_of_residents_value_1%5Bmin%5D=' . $min . '&field_number_of_residents_value_1%5Bmax%5D=' . $max;
      if (!empty($selected_filters) && isset($selected_filters['field_community']) && $selected_filters['field_community'] != 'All') {
        $link = $view_url->toString() . '?field_community_value=All&field_number_of_residents_value=' . $size . '&field_number_of_residents_value_1_op=' . $operator . '&field_number_of_residents_value_1%5Bvalue%5D=' . $value . '&field_number_of_residents_value_1%5Bmin%5D=' . $min . '&field_number_of_residents_value_1%5Bmax%5D=' . $max;
        $filters_html .= '<a href="' . $link . '"><span class="filter-tag">' . $selected_filters['field_community'] . '</span></a>';
      }
      if (!empty($selected_filters) && isset($selected_filters['size'])) {
        $link = $view_url->toString() . '?field_community_value=' . $community . '&field_number_of_residents_value=All&field_number_of_residents_value_1_op=' . $operator . '&field_number_of_residents_value_1%5Bvalue%5D=' . $value . '&field_number_of_residents_value_1%5Bmin%5D=' . $min . '&field_number_of_residents_value_1%5Bmax%5D=' . $max;
        $filter_size = $selected_filters['size'];
        $filters_html .= '<a href="' . $link . '"><span class="filter-tag">' . $filter_size . '</span></a>';
      }
    }
    $variables['selected_filters_output'] = $filters_html;
  }
}

/**
 * Implements hook_preprocess_datetime_form().
 */
// function penchas_preprocess_datetime_form(array &$variables) {
//   // Check if the specific field is part of the form.
//   // dd($variables);
//   if (isset($variables['element']['#fields']['field_event_schedule'])) {
//     // Iterate over the field settings to find the time input element.
//     foreach ($variables['element']['#fields']['field_event_schedule'] as $key => &$field) {
//       // Check if the element is a time input field.
//       if (isset($field['#type']) && $field['#type'] == 'time') {
//         // Set the step value to 3600 to remove minutes (1 hour intervals).
//         $field['#attributes']['step'] = 3600;
//       }
//     }
//   }
// }
