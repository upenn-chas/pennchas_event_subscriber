<?php

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_view().
 */
function event_evaluation_views_pre_view(ViewExecutable $view, &$display_id, &$args)
{
    if ($view->id() === 'event_evaluation_view' && $display_id === 'event_evaluate_page_view') {
        $node_id = $args[0];
        $node = \Drupal\node\Entity\Node::load($node_id);
        if (!$node) {
            throw new \Symfony\Component\HttpKernel\Exception\NotFoundHttpException();
        }

        if(!is_event_ready_for_evaluation($node)) {
            throw new \Symfony\Component\HttpKernel\Exception\BadRequestHttpException('HJHKJ');
        }

        $current_user = \Drupal::currentUser();

        if (!($current_user->hasPermission('event any evaluation') ||
            ($current_user->hasPermission('event own evaluation') && $node->getOwnerId() === $current_user->id()))) {
            throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
        }
        $view->attachment_after['header'] = [
            '#type' => 'container',
            '#id' => 'event_evaluation_form_continer',
            'form_wrapper' => [
                '#type' => 'markup',
                '#markup' => \Drupal::service('renderer')->render(
                    \Drupal::formBuilder()->getForm(new \Drupal\event_evaluation\Form\EventEvaluationForm($node))
                )
            ]
        ];
    }
}

/**
 * Implements hook_views_post_render().
 */
function event_evaluation_views_post_render($view)
{
    if ($view->id() == 'event_evaluation_view' && $view->current_display == 'event_evaluate_page_view') {
        $node_id = \Drupal::routeMatch()->getParameter('node');
        $node = \Drupal\node\Entity\Node::load($node_id);
        $view->setTitle("Evaluate: {$node->getTitle()}");
    }
}

/**
 * Implements hook_entity_operation_alter().
 *
 * Add the evaluate option into the content type grid for CHAS Event contents.
 */
function event_evaluation_entity_operation_alter(array &$operations, \Drupal\Core\Entity\EntityInterface $entity)
{
    if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'chas_event') {

        if (is_event_ready_for_evaluation($entity)) {
            $operations['evaluate'] = [
                'title' => 'Evaluate',
                'weight' => 10,
                'url' => \Drupal\Core\Url::fromRoute('event_evaluation_operation_option', [
                    'node' => $entity->id(),
                ]),
            ];
        }
    }
}

function is_event_ready_for_evaluation(\Drupal\Core\Entity\EntityInterface $entity)
{
    if (!$entity->get('status')->value) {
        return false;
    }
    $result = true;
    $current_time = time();
    $event_schedule = $entity->get('field_event_schedule');
    $length = count($event_schedule);
    for ($i = 0; $i < $length; $i++) {
        if ($event_schedule[$i]->end_value > $current_time) {
            $result = false;
            break;
        }
    }

    return $result;
}
