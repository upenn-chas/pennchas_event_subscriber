<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\pennchas_form_alter\Plugin\FormAlter\ModerationFormAlter;
use Drupal\pennchas_form_alter\Hook\NodeInsertHook;
use Drupal\pennchas_form_alter\Hook\NodePreSaveHook;
use Drupal\pennchas_form_alter\Hook\NodePreUpdateHook;
use Drupal\pennchas_form_alter\Hook\NodeUpdateHook;
use Drupal\pennchas_form_alter\Plugin\FormAlter\EventFormAlter;
use Drupal\pennchas_form_alter\Plugin\FormAlter\NoticeFormAlter;
use Drupal\pennchas_form_alter\Util\Constant;
use Drupal\group\Entity\Group;
use Drupal\user\Entity\Role;
use Drupal\group\Entity\GroupType;
use Drupal\Core\Database\Database;
use Drupal\pennchas_form_alter\Plugin\FormAlter\ReserveRoomFormAlter;
use Drupal\pennchas_form_alter\Plugin\FormAlter\RoomFormAlter;
use Drupal\pennchas_form_alter\Plugin\FormAlter\UserFormAlter;
use Drupal\field\Entity\FieldConfig;
use Drupal\pennchas_form_alter\Plugin\FormAlter\ReportExposeFormAlter;
use Drupal\group\Entity\GroupRole;


function pennchas_form_alter_form_alter(array &$form, FormStateInterface $formState, string $formId)
{
    switch ($formId) {
        case 'content_moderation_entity_moderation_form':
            $form['submit']['#value'] = t('Submit');
            break;
        case 'node_program_community_form':
            if (!\Drupal::currentUser()->hasRole('administrator')) {
                $form['field_group']['#access'] = false;
            }
            break;
        case 'node_chas_event_form':
        case 'node_chas_event_edit_form':
            $form = (new EventFormAlter())->alter($form, $formState);
            break;
        case 'node_notices_form':
        case 'node_notices_edit_form':
            $form = (new NoticeFormAlter())->alter($form, $formState);
            break;
        case 'user_role_form':
        case 'group_role_add_form':
        case 'group_role_edit_form':
            $form = (new UserFormAlter())->alter($form, $formState);
            break;
        case 'node_reserve_room_form':
        case 'node_reserve_room_edit_form':
            $form = (new ReserveRoomFormAlter())->alter($form, $formState);
            break;
        case 'node_room_form':
        case 'node_room_edit_form':
            $form = (new RoomFormAlter())->alter($form, $formState);
            break;
        case 'content_moderation_entity_moderation_form':
            $form = (new ModerationFormAlter())->alter($form, $formState);
            break;
        case 'node_room_delete_form':
        case 'node_chas_event_delete_form':
        case 'node_reserve_room_delete_form':
        case 'node_notices_delete_form':
            $form['actions']['submit']['#submit'] = ['pennchas_form_alter_soft_delete'];
            break;
        case 'views_form_webform_export_page_1':
            $form['header']['webform_submission_bulk_form']['action']['#default_value'] = 'webform_submission_export_action';
            $form['actions']['submit']['#value'] = t('Export');
            break;
        case Constant::VIEW_EXPOSED_FORM_ID:
            pennchas_form_alter_views_exposed_form_alter($form, $formState);
            break;
        default:
            break;
    }
}

/**
 * 
 * Alter the exposed form of views.
 */
function pennchas_form_alter_views_exposed_form_alter(array &$form, FormStateInterface $formState)
{
    // Get the form ID
    $filterFormId = $form['#id'];
    
    // Targeted views
    static $targetViews = [
        'views-exposed-form-moderation-reports-event-moderation' => 1,
        'views-exposed-form-room-reservation-reports-page-1' => 1,
        'views-exposed-form-contents-change-report-page-1' => 1,
        'views-exposed-form-videos-link-report-page-1' => 1,
        'views-exposed-form-events-evaluation-report-page-1' => 1,
        'views-exposed-form-contents-delete-report-page-1' => 1,
        'views-exposed-form-rooms-reservation-moderation-reports-page-1' => 1,
        'views-exposed-form-users-reports-page-1' => 1,
    ];
    static $targetDashboardViews = [
        'views-exposed-form-my-reservations-my-pending-reservations' => 1,
        'views-exposed-form-my-reservations-my-reservations-block' => 1,
        'views-exposed-form-my-reservations-page-1' => 1,
        'views-exposed-form-my-reservations-page-2' => 1,
        'views-exposed-form-my-reservations-page-3' => 1,
        'views-exposed-form-my-events-my-events-block' => 1,
        'views-exposed-form-my-events-my-pending-events' => 1,
        'views-exposed-form-my-events-page-1' => 1,
        'views-exposed-form-my-events-page-2' => 1,
        'views-exposed-form-my-events-page-3' => 1,
    ];

    if (isset($targetViews[$filterFormId])) {
        $form = (new ReportExposeFormAlter())->alter($form, $formState);
    } else if(isset($targetDashboardViews[$filterFormId]) || $filterFormId === 'views-exposed-form-moderated-content-moderated-content') { 
        if (isset($form['moderation_state'])) {
            unset($form['moderation_state']['#options']['All']);
        }
    }else if (in_array($filterFormId, ['views-exposed-form-media-library-widget', 'views-exposed-form-media-library-widget-table'], TRUE)) {
        $groups = $groups = \Drupal::service('pennchas_common.option_group')->options('house1');
        $form['gid']['#options'] = ['All' => $form['gid']['#options']['All']] + $groups;
    }
}

function pennchas_form_alter_soft_delete(array &$form, FormStateInterface $formState)
{
    $node = $formState->getFormObject()->getEntity();
    if ($node instanceof Node && $node->hasField('moderation_state')) {
        $type = ucwords(str_replace('_', ' ', $node->getType()));
        $currentState = $node->get('moderation_state')->getString();
        if ($currentState !== Constant::MOD_STATUS_DELETE) {
            $node->set('moderation_state', Constant::MOD_STATUS_DELETE);
            $node->setUnpublished();
            $node->setNewRevision(true);
            $node->setRevisionLogMessage('Deleted');
            $node->set('field_last_state', $currentState);
            $node->save();

            \Drupal::messenger()->addStatus(t('%type %title has been deleted.', ['%type' => $type, '%title' => $node->getTitle()]));
        } else {
            \Drupal::messenger()->addStatus(t('%type %title has already been deleted.', ['%type' => $type, '%title' => $node->getTitle()]));
        }
        $formState->setRedirect('entity.node.canonical', ['node' => $node->id()]);
    } else {
        \Drupal::messenger()->addStatus(t('Node of type %type doesnt support soft delete.', ['%type' => $node->gettype()]));
    }
}



function pennchas_form_alter_entity_presave(EntityInterface $entity)
{
    if ($entity instanceof NodeInterface) {
        $entity->setTitle(trim($entity->getTitle()));
        if ($entity->isNew()) {
            (new NodePreSaveHook())->handle($entity); //(this will work for Admin. But needs to fix corrections)
        } else {
            (new NodePreUpdateHook())->handle($entity);
        }
    }
}

function pennchas_form_alter_node_insert(Node $node)
{
    $nodeType = $node->getType();
    if (
        $nodeType === Constant::NODE_RESERVE_ROOM
        || $nodeType === Constant::NODE_ROOM
        || $nodeType === Constant::NODE_EVENT
        || $nodeType === Constant::NODE_NOTICES
        || $nodeType === Constant::NODE_HOUSE_PAGE
    ) {
        (new NodeInsertHook())->handle($node);
    }
}

function pennchas_form_alter_node_update(Node $node)
{

    $nodeType = $node->getType();
    if ($nodeType === Constant::NODE_EVENT 
        || $nodeType === Constant::NODE_RESERVE_ROOM
        || $nodeType === Constant::NODE_HOUSE_PAGE
    ) {
        (new NodeUpdateHook())->handle($node);
    }
}


function pennchas_form_alter_entity_type_alter(&$entityType)
{
    if (isset($entityType['group_role'])) {
        $entityKeys = $entityType['group_role']->get('entity_keys');
        $entityKeys['umbera_roles'] = 'umbera_roles';
        $entityType['group_role']->set('entity_keys', $entityKeys);
    }
}

function pennchas_form_alter_entity_bundle_field_info_alter(&$fields, $entityType, $bundle)
{
    if ($bundle === Constant::NODE_EVENT) {
        if(isset($fields['title'])) {
            $fields['title']->addConstraint('TextConstraint');
        }
        
        if (isset($fields['field_collaborators'])) {
            $fields['field_collaborators']->addConstraint('UniqueCollaboratorsEmailConstraint');
        }

        if (isset($fields['field_event_schedule'])) {
            $fields['field_event_schedule']->addConstraint('EventScheduleConstraint');
        }
    } else if ($bundle === Constant::NODE_RESERVE_ROOM) {
        if(isset($fields['title'])) {
            $fields['title']->addConstraint('TextConstraint');
        }

        if (isset($fields['field_room'])) {
            $fields['field_room']->addConstraint('AllowRoomConstraint');
        }

        if (isset($fields['field_event_schedule'])) {
            $fields['field_event_schedule']->addConstraint('RoomAvailableConstraint');
        }

        if (isset($fields['field_anticipated_participants'])) {
            $fields['field_anticipated_participants']->addConstraint('RoomMaxGuestConstraint');
        }
    } else if ($bundle === Constant::NODE_ROOM) {

        if(isset($fields['title'])) {
            $fields['title']->addConstraint('TextConstraint');
        }
        
        if (isset($fields['field_text_box'])) {
            $fields['field_text_box']->addConstraint('TextConstraint');
        }

        if(isset($fields['field_address'])) {
            $fields['field_address']->addConstraint('TextConstraint');
        }
    }
}

function pennchas_form_alter_entity_operation_alter(array &$operations, EntityInterface $entity)
{
    if ($entity instanceof NodeInterface) {
        if (!$entity->isPublished() && $entity->get('moderation_state')->getString() === Constant::MOD_STATUS_DELETE) {
            $opts = [
                'edit',
                'delete',
                'clone',
                'devel',
            ];
            foreach($opts as $opt) {
                if (isset($operations[$opt])) {
                    unset($operations[$opt]);
                }
            }
        }
    }
}

function pennchas_form_alter_node_search_result(\Drupal\node\NodeInterface $node)
{
    // Initialize variables
    $variables = [];
    $connection = Database::getConnection();
    $nid = $node->id();
    $current_user = \Drupal::currentUser();
    $user_roles = $current_user->getRoles();
    $allowed_roles = ['chas_student_worker', 'chas_technology', 'chas_professional_staff', 'chas_director'];

    // Check if the user has one of the allowed roles
    if (array_intersect($user_roles, $allowed_roles)) {
        $query = $connection->select('node_field_data', 'nf');
        $query->fields('nf');
        $query->condition('nf.nid', $nid);
        $query->condition('nf.type', 'reserve_room', '!=');
        $node_results = $query->execute()->fetchAll();
        $variables['node_access'] = !empty($node_results) ? 'TRUE' : 'FALSE';
    } elseif ($current_user->hasRole('authenticated')) {
        $query = $connection->select('group_relationship_field_data', 'gr');
        $query->condition('gr.entity_id', $current_user->id());
        $query->condition('gr.plugin_id', 'group_membership');
        $query->fields('gr', ['gid']);
        $group_results = $query->execute()->fetchCol();

        if (!empty($group_results)) {
            // If the user is part of groups, check if the node is in any of those groups
            foreach ($group_results as $group_id) {
                $query = $connection->select('group_relationship_field_data', 'gr');
                $query->condition('gr.gid', $group_id);
                $query->condition('gr.entity_id', $nid);
                $query->condition('gr.plugin_id', 'group_node:reserve_room', '!=');
                $query->fields('gr');
                $node_results = $query->execute()->fetchAll();
                if (!empty($node_results)) {
                    $variables['node_access'] = 'TRUE';
                    break;
                }
            }
        } else {
            $query = $connection->select('node_field_data', 'nf');
            $query->fields('nf');
            $query->condition('nf.nid', $nid);
            $query->condition('nf.type', 'reserve_room', '!=');
            $node_results = $query->execute()->fetchAll();
            $variables['node_access'] = !empty($node_results) ? 'TRUE' : 'FALSE';
        }
    } else {
        $query = $connection->select('node_field_data', 'nf');
        $query->fields('nf');
        $query->condition('nf.nid', $nid);
        $query->condition('nf.type', 'reserve_room', '!=');
        $node_results = $query->execute()->fetchAll();
        $variables['node_access'] = !empty($node_results) ? 'TRUE' : 'FALSE';
    }

    return $variables;
}

// function pennchas_form_alter_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id)
// {
//     // Ensure the form ID is correct
//     $view_id = ['calendar'];
//     if (false && $form_id == 'views_exposed_form' && in_array($form_state->get('view')->id(), $view_id)) {
//         $form['#after_build'][] = 'penchas_add_exclude_notices_filter';
//     }
// }

function penchas_add_exclude_notices_filter($form, FormStateInterface &$form_state)
{
    // Add your custom checkbox field under the form
    $inputs = $form_state->getUserInput();

    $form['exclude_notice'] = [
        '#type' => 'checkbox',
        '#title' => t('General Events/Notice'),
        '#description' => t('Exclude Notices'),
        '#default_value' => !!$inputs['exclude_notice'],
        '#attributes' => [
            'class' => ['form-checkbox', 'form-check-input'],
            'data-drupal-selector' => 'edit-type-exclude-notices',
            'id' => 'edit-type-exclude-notices',
            'name' => 'exclude_notice',
            'value' => 'Exclude Notices',
        ],
    ];

    return $form;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function pennchas_form_alter_menu_local_tasks_alter(&$data, $route_name)
{
    // Get the tabs array.
    $tabs = &$data['tabs'][0];

    // Check if the tabs array is empty.
    if(!$tabs) {
        return;
    }

    // List of common tabs to remove.
    static $unsetTabs = [
        'devel' => 1,
        'search content' => 1,
        'moderated content' => 1,
        'test' => 1,
    ];
    remove_tabs($tabs, $unsetTabs);

    // Get the node object from the route.
    $node = \Drupal::routeMatch()->getParameter('node');

    // Check if the node is a node object.
    if ($node && $node instanceof NodeInterface) {
        // List of tabs to remove when the node is deleted.
        static $unsetTabsOfDeletedNode = [
            'delete' => 1,
            'edit' => 1,
            'layout' => 1,
            'clone' => 1,
            'revert' => 1,
            'test' => 1,
        ];
        // Check if the node is deleted.
        if ($node->hasField('moderation_state') && $node->get('moderation_state')->getString() === 'delete') {
            remove_tabs($tabs, $unsetTabsOfDeletedNode);
        }
    }

    $current_user = \Drupal::currentUser();
    $user_roles = $current_user->getRoles();

    if ($current_user->hasRole('administrator')) {
        return;
    }

    $allowed_roles = ['chas_student_worker', 'chas_technology', 'chas_professional_staff', 'chas_director'];
    // dd($tabs);
    if (array_intersect($user_roles, $allowed_roles)) {
        static $unsetDeleteTab = [
            'delete' => 0,
            'latest version' => 0,
        ];
        remove_tabs($tabs, $unsetDeleteTab);
    }

}

/**
 * Remove tabs from the tabs array.
 *
 * @param array $tabs
 *   The tabs array.
 * @param array $tabTitles
 *   The list of tab titles to remove.
 */
function remove_tabs(array &$tabs, array $tabTitles)
{
    foreach ($tabs as $key => $config) {
        $tabTitle = strtolower($config['#link']['title']);
        if (isset($tabTitles[$tabTitle])) {
            unset($tabs[$key]);
        }
    }
}


function pennchas_form_alter_preprocess_field(&$variables) {
    // Target the specific field in the group entity.
    if ($variables['element']['#field_name'] == 'field_program_communities') {
        foreach ($variables['items'] as &$item) {
            if (!empty($item['content'])) {
            $getEntity = $item['content']['#url']->getOption('entity');

            $nid = $getEntity->get('entity_id')->target_id; // Assuming the field stores node ID.
            // Load the node.
            $node = \Drupal\node\Entity\Node::load($nid);
            if ($node) {
                // Generate the node link.
                $url = $node->toUrl();
                $title = $node->getTitle();
                $item['content']['#url'] = $url;
                $item['content']['#attributes'] = ['target'=> '_blank'];
            }
        }
      }
    }
}

function pennchas_form_alter_preprocess_form_element(&$variables) {
    if (strpos($variables['name'] , 'field_block_display_condition_wi') !== false) {
      $items = &$variables['items'];

        $group_role = GroupRole::load($variables['element']['#return_value']);
        if($group_role){
            $variables['label']['#title'] = $group_role->get('label') .' ('. $group_role->get('scope') .')';
        }
    }
}

function pennchas_form_alter_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {
    
    if($context['items']->getName() == 'field_events_by_group_ref'){
        if($element['options']){
            $element['options']['argument']['#title'] = t('House ID');
        }
    }
  }
  
