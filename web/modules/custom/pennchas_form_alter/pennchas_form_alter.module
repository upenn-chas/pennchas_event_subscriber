<?php

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\MessageCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\Role;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

function pennchas_form_alter_form_alter(array &$form, FormStateInterface $form_state, string $form_id)
{
    if ($form_id === 'node_reserve_room_form' || $form_id === 'node_reserve_room_edit_form') {
        pennchas_form_alter_reserve_room_form($form, $form_state);
    } else if ($form_id === 'user_role_form' || $form_id === 'group_role_add_form' || $form_id === 'group_role_edit_form') {
        pennchas_form_alter_role_form($form, $form_state);
    }
}

function pennchas_form_alter_reserve_room_form(array &$form, FormStateInterface $form_state)
{
    $form['field_room']['widget']['#ajax'] = [
        'callback' => 'onRoomSelect',
        'event' => 'change'
    ];
    $form['#attached']['library'][] = 'pennchas_form_alter/reserve_room_smart_date';
}

function pennchas_form_alter_role_form(array &$form, FormStateInterface $form_state)
{
    $categories = [];
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('role_category');
    if (!empty($terms)) {
        foreach ($terms as $term) {
            $categories[$term->tid] = $term->name;
        }

        $role = $form_state->getFormObject()->getEntity();
        $existing_categories = $role->getThirdPartySetting('umbera_roles', 'target_ids');

        $form['umbera_roles'] = [
            '#type' => 'checkboxes',
            '#title' => t('Umbera Roles'),
            '#default_value' => $existing_categories ?: '',
            '#options' => $categories,
        ];

        if ($form['actions']) {
            foreach (array_keys($form['actions']) as $action) {
                if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
                    $form['actions'][$action]['#submit'][] = 'role_form_submit_handler';
                }
            }
        }
    }
}

function onRoomSelect(array $form, FormStateInterface $form_state)
{
    $request = \Drupal::request();
    if (!$request->query->has('ajax_form') || (int) $request->query->get('ajax_form') !== 1) {
        throw new AccessDeniedHttpException();
    }
    $current_user = \Drupal::currentUser();
    $response = new AjaxResponse();
    if ($current_user->hasRole('administrator')) {
        return $response;
    }
    $isAuthentic = false;
    $selected_room = $form_state->getValue('field_room');
    $selected_room_id = $selected_room[0]['target_id'];
    $room = Node::load($selected_room_id);
    $room_available_to = $room->get('field_available_to')->getString();

    $group = \Drupal::routeMatch()->getParameter('group');
    $member = $group->getMember($current_user);
    $roles = [];
    if ($member) {
        $roles = $member->getRoles();
    } else {
        $roles = Role::loadMultiple($current_user->getRoles(true));
    }
    foreach ($roles as $role) {
        $umbera_roles = $role->getThirdPartySetting('umbera_roles', 'target_ids');
        if ($umbera_roles && isset($umbera_roles[$room_available_to])) {
            $isAuthentic = true;
            break;
        }
    }
    if (!$isAuthentic) {
        $response->addCommand(new MessageCommand(t('You are not authorized to book this room.'), NULL, ['type' => 'error']));
    }
    return $response;
}

function role_form_submit_handler(&$form, FormStateInterface $form_state)
{
    $role_categories = $form_state->getValue('umbera_roles');
    $role_categories = array_filter($role_categories);
    $role = $form_state->getFormObject()->getEntity();
    $role->setThirdPartySetting('umbera_roles', 'target_ids', $role_categories);
    $role->save();
}
