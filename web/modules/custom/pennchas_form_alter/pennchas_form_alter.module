<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\pennchas_form_alter\Plugin\FormAlter\ModerationFormAlter;
use Drupal\pennchas_form_alter\Hook\NodeInsertHook;
use Drupal\pennchas_form_alter\Hook\NodePreInsertHook;
use Drupal\pennchas_form_alter\Hook\NodePreUpdateHook;
use Drupal\pennchas_form_alter\Hook\NodeUpdateHook;
use Drupal\pennchas_form_alter\Plugin\FormAlter\EventFormAlter;
use Drupal\pennchas_form_alter\Plugin\FormAlter\NoticeFormAlter;
use Drupal\pennchas_form_alter\Util\Constant;

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\group\Entity\Group;
use Drupal\Core\Database\Database;

function pennchas_form_alter_form_alter(array &$form, FormStateInterface $formState, string $formId)
{
    if ($formId === 'node_chas_event_form' || $formId === 'node_chas_event_edit_form') {
        $eventFormAlter = new EventFormAlter();
        $form = $eventFormAlter->alter($form, $formState);
    } else if ($formId === 'node_notices_form' || $formId === 'node_notices_edit_form') {
        $eventFormAlter = new NoticeFormAlter();
        $form = $eventFormAlter->alter($form, $formState);
    } else if ($formId === 'user_role_form' || $formId === 'group_role_add_form' || $formId === 'group_role_edit_form') {
        pennchas_form_alter_role_form($form, $formState);
    } else if ($formId === 'node_room_form' || $formId === 'node_room_edit_form') {
        $form['field_duration']['widget'][0]['duration']['#h']['#max'] = 23;
        $form['field_duration']['widget'][0]['duration']['#h']['#step'] = 1;
        $form['field_duration']['widget'][0]['duration']['#i']['#max'] = 30;
        $form['field_duration']['widget'][0]['duration']['#i']['#step'] = 30;
    } else if ($formId === 'content_moderation_entity_moderation_form') {
        $moderationFormAlter = new ModerationFormAlter();
        $form = $moderationFormAlter->alter($form, $formState);
    } else if ($formId === 'node_reserve_room_form') {
        $group = \Drupal::routeMatch()->getParameter('group');
        if (isset($group)) {
            $form['field_room']['widget']['#options'] = _get_group_rooms($group->id());
        }
    } else if ($formId === 'node_reserve_room_edit_form') {
        $node  = $formState->getFormObject()->getEntity();
        $groupId = (int) $node->get('field_group')->getString();
        $form['field_room']['widget']['#options'] = _get_group_rooms($groupId);
    } else if ($formId === 'node_room_delete_form') {
        $form['actions']['submit']['#submit'] = ['pennchas_form_alter_soft_delete'];
    } else if ($formId === Constant::VIEW_EXPOSED_FORM_ID) {
        $viewId = \Drupal::request()->get('view_id');
        if ($viewId === Constant::VIEW_EVENT_CALENDAR) {
            if (isset($form['start']) && isset($form['start']['#attributes'])) {
                unset($form['start']['#attributes']['data-bef-auto-submit-exclude']);
            }
            if (isset($form['end']) && isset($form['end']['#attributes'])) {
                unset($form['end']['#attributes']['data-bef-auto-submit-exclude']);
            }

            if (isset($form['event_type'])) {
                $form['event_type']['#default_value'] = 1;
                $form['event_type']['#value'] = 1;
            }

            if (isset($form['campus_wide'])) {
                $form['campus_wide']['#default_value'] = 1;
                $form['campus_wide']['#value'] = 1;
            }

            if (isset($form['content_type'])) {
                $form['content_type']['#default_value'] = 1;
                $form['content_type']['#value'] = 1;
            }
        } else if ($viewId === 'moderation_reports'
            || $viewId === 'room_reservation_reports') {
            if(isset($form['moderation_state'])) {
                unset($form['moderation_state']['#options']['All']);
            }

            if(isset($form['exposed_from_date'])) {
                $form['exposed_from_date']['#title'] = t('From');
            }

            if(isset($form['exposed_to_date'])) {
                $form['exposed_to_date']['#title'] = t('To');
            }
        }
    }
}

function pennchas_form_alter_soft_delete(array &$form, FormStateInterface $formState)
{
    $node = $formState->getFormObject()->getEntity();
    if ($node instanceof Node && $node->hasField('moderation_state')) {
        if ($node->get('moderation_state')->getString() !== Constant::MOD_STATUS_DELETE) {
            $node->set('moderation_state', Constant::MOD_STATUS_DELETE);
            $node->setUnpublished();
            $node->setRevisionLogMessage(t('Deleted'));
            $node->save();

            \Drupal::messenger()->addStatus(t('Node %title has been deleted.', ['%title' => $node->getTitle()]));
        } else {
            \Drupal::messenger()->addStatus(t('Node %title has already been deleted.', ['%title' => $node->getTitle()]));
        }
        $formState->setRedirect('entity.node.canonical', ['node' => $node->id()]);
    } else {
        \Drupal::messenger()->addStatus(t('Node of type %type doesnt support soft delete.', ['%type' => $node->gettype()]));
    }
}

function pennchas_form_alter_entity_presave(EntityInterface $entity)
{
    if ($entity instanceof NodeInterface) {
        if ($entity->isNew()) {
            (new NodePreInsertHook())->handle($entity);
        } else {
            (new NodePreUpdateHook())->handle($entity);
        }
    }
}

function pennchas_form_alter_node_insert(Node $node)
{
    $nodeType = $node->getType();
    if ($nodeType === Constant::NODE_RESERVE_ROOM || $nodeType === Constant::NODE_ROOM || $nodeType === Constant::NODE_EVENT  || $nodeType === Constant::NODE_NOTICES) {
        (new NodeInsertHook())->handle($node);
    }
}

function pennchas_form_alter_node_update(Node $node)
{
    $nodeType = $node->getType();
    if ($nodeType === Constant::NODE_EVENT) {
        (new NodeUpdateHook())->handle($node);
    }
}


function pennchas_form_alter_entity_type_alter(&$entityType)
{
    if (isset($entityType['group_role'])) {
        $entityKeys = $entityType['group_role']->get('entity_keys');
        $entityKeys['umbera_roles'] = 'umbera_roles';
        $entityType['group_role']->set('entity_keys', $entityKeys);
    }
}

function pennchas_form_alter_entity_bundle_field_info_alter(&$fields, $entityType, $bundle)
{
    if ($bundle === Constant::NODE_RESERVE_ROOM) {
        if (isset($fields['field_room'])) {
            $fields['field_room']->addConstraint('AllowRoomConstraint');
        }

        if (isset($fields['field_event_schedule'])) {
            $fields['field_event_schedule']->addConstraint('RoomAvailableConstraint');
        }

        if (isset($fields['field_anticipated_participants'])) {
            $fields['field_anticipated_participants']->addConstraint('RoomMaxGuestConstraint');
        }
    } else if ($bundle === Constant::NODE_ROOM) {
        if (isset($fields['field_room_gps_pin'])) {
            $fields['field_room_gps_pin']->addConstraint('GeoCoordinatesConstraint');
        }
    }
}

function pennchas_form_alter_role_form(array &$form, FormStateInterface $formState)
{
    $umberaRoles = [];
    $terms = \Drupal::entityTypeManager()->accessCheck(false)->getStorage('taxonomy_term')->loadTree('role_category');

    if (!empty($terms)) {
        foreach ($terms as $term) {
            $umberaRoles[$term->name] = $term->name;
        }

        $role = $formState->getFormObject()->getEntity();
        $existingUmbera_roles = $role->getThirdPartySetting('pennchas_form_alter', 'umbera_roles');

        $form['umbera_roles'] = [
            '#type' => 'checkboxes',
            '#title' => t('Umbera Roles'),
            '#default_value' => $existingUmbera_roles ?: '',
            '#options' => $umberaRoles
        ];

        $form['actions']['submit']['#submit'][] = 'role_form_submit_handler';
    }
}

function pennchas_form_alter_entity_operation_alter(array &$operations, EntityInterface $entity)
{
    if ($entity instanceof NodeInterface) {
        if (!$entity->isPublished() && $entity->get('moderation_state')->getString() === Constant::MOD_STATUS_DELETE) {
            if (isset($operations['edit'])) {
                unset($operations['edit']);
            }
            if (isset($operations['delete'])) {
                unset($operations['delete']);
            }
        }
    }
}

function role_form_submit_handler(&$form, FormStateInterface $formState)
{
    $umberaRoles = $formState->getValue('umbera_roles');
    $umberaRoles = array_filter($umberaRoles);
    if ($umberaRoles) {
        $role = $formState->getFormObject()->getEntity();
        $role->setThirdPartySetting('pennchas_form_alter', 'umbera_roles', $umberaRoles);
        $role->save();
    }
}

function _get_group_rooms(int $groupId)
{
    $roomsIds = \Drupal::entityQuery('node')
        ->accessCheck(false)
        ->condition('type', 'room')
        ->condition('status', 1)
        ->condition('field_group', $groupId)
        ->execute();

    $rooms = Node::loadMultiple($roomsIds);

    $roomOptions = [
        '' => '- Select a value -'
    ];
    foreach ($rooms as $room) {
        $roomOptions[$room->id()] = $room->getTitle();
    }
    return $roomOptions;
}

// function pennchas_form_alter_preprocess_search_result(array &$variables) {
//     dd($variables);
//     // // Loop through the results and modify them as needed.
//     // foreach ($results as &$result) {
//     //   // For example, add custom text to the search result title.
//     //   if ($result['title'] == 'Some Specific Title') {
//     //     $result['title'] = 'Modified Title';
//     //   }
  
//     //   // You can also alter other properties such as the URL, snippet, etc.
//     //   $result['snippet'] = 'This is a custom snippet for the result.';
//     // }
//   }
/**
 * Implements search_api_result_alter().
 */
function pennchas_form_alter_node_search_result(\Drupal\node\NodeInterface $node) {
    $variables = [];
    $current_user = \Drupal::currentUser();
    $variables['node_access'] = 'TRUE';
    if ($node->bundle() == 'reserve_room') {
      $connection = Database::getConnection();
      $variables['node_access'] = 'FALSE';
      if ($current_user->isAuthenticated()) {
        $variables['node_access'] = 'TRUE';
        $query = $connection->select('group_relationship_field_data', 'gr')
        ->fields('gr', ['gid'])
            ->condition('entity_id', $current_user->id(), '=')
        // ->condition('entity_id', $node->id(), '=')
        ->condition('plugin_id', 'group_membership', '=');
        $results = $query->execute()->fetchAll();
        dump($results);
        if($results){

        }
      }
    }
    return $variables;
}

// function pennchas_form_alter_search_api_result_alter(array &$results) {
//     foreach ($results as &$result) {
//       // Example: Modify the title of search results.
//       if ($result->getId() && $result->get('type') == 'article') {
//         $result->set('title', 'Modified Title: ' . $result->get('title'));
//       }
//     }
//   }
  

/**
 * Implements hook_query_TAG_alter(): tag search_$type with $type node_search.
 */
function pennchas_form_alter_query_search_node_search_alter(AlterableInterface $query)
{
    $current_user = \Drupal::currentUser();
    if ($current_user->isAuthenticated()) {
        $connection = Database::getConnection();
        $associated_groups = [];
        // $query = $connection->select('group_relationship_field_data', 'gr')
        //   ->fields('gr', ['gid'])
        //     ->condition('entity_id', $current_user->id(), '=')
        //   // ->condition('entity_id', '40', '=')
        //   ->condition('plugin_id', 'group_membership', '=');
        // $results = $query->execute()->fetchAll();
        // if($results){
        //   foreach ($results as $key => $result) {
        //     $associated_groups[] = $result->gid;
        //   }
        // }
        // $variables['is_member_of_group'] = implode(',', $associated_groups);
        // $variables['node_access'] = FALSE;
        // $query->condition('n.type', 'reserve_room', '!=');
        // Check if the user has any memberships
        // if (!empty($membership)) {
        // 	// The user is a member of at least one group
        // 	$variables['is_member_of_group'] = TRUE;
        // } else {
        // 	// The user is not a member of any group
        // 	$variables['is_member_of_group'] = FALSE;
        // }
        // $query->condition('n.type', 'program_community', '!=');
    } else {
        // $query->condition('n.type', 'reserve_room', '!=');
        // $query->condition('n.type', 'room', '!=');
        // $query->condition('n.type', 'notices', '!=');
        // $query->condition('n.type', 'program_community', '!=');
    }
}
