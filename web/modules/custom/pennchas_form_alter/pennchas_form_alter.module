<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\pennchas_form_alter\Plugin\FormAlter\ModerationFormAlter;
use Drupal\pennchas_form_alter\Hook\NodeInsertHook;
use Drupal\pennchas_form_alter\Hook\NodePreInsertHook;
use Drupal\pennchas_form_alter\Hook\NodePreUpdateHook;
use Drupal\pennchas_form_alter\Hook\NodeUpdateHook;
use Drupal\pennchas_form_alter\Plugin\FormAlter\EventFormAlter;
use Drupal\pennchas_form_alter\Plugin\FormAlter\NoticeFormAlter;
use Drupal\pennchas_form_alter\Util\Constant;

function pennchas_form_alter_form_alter(array &$form, FormStateInterface $formState, string $formId)
{
    if ($formId === 'node_chas_event_form' || $formId === 'node_chas_event_edit_form') {
        $eventFormAlter = new EventFormAlter();
        $form = $eventFormAlter->alter($form, $formState);
    } else if ($formId === 'node_notices_form' || $formId === 'node_notices_edit_form') {
        $eventFormAlter = new NoticeFormAlter();
        $form = $eventFormAlter->alter($form, $formState);
    } else if ($formId === 'user_role_form' || $formId === 'group_role_add_form' || $formId === 'group_role_edit_form') {
        pennchas_form_alter_role_form($form, $formState);
    } else if ($formId === 'node_room_form' || $formId === 'node_room_edit_form') {
        $form['field_duration']['widget'][0]['duration']['#h']['#max'] = 23;
        $form['field_duration']['widget'][0]['duration']['#h']['#step'] = 1;
        $form['field_duration']['widget'][0]['duration']['#i']['#max'] = 30;
        $form['field_duration']['widget'][0]['duration']['#i']['#step'] = 30;
    } else if ($formId === 'content_moderation_entity_moderation_form') {
        $moderationFormAlter = new ModerationFormAlter();
        $form = $moderationFormAlter->alter($form, $formState);
    } else if ($formId === 'node_reserve_room_form') {
        $group = \Drupal::routeMatch()->getParameter('group');
        if (isset($group)) {
            $form['field_room']['widget']['#options'] = _get_group_rooms($group->id());
        }
    } else if ($formId === 'node_reserve_room_edit_form') {
        $node  = $formState->getFormObject()->getEntity();
        $groupId = (int) $node->get('field_group')->getString();
        $form['field_room']['widget']['#options'] = _get_group_rooms($groupId);
    } else if ($formId === 'node_room_delete_form') {
        $form['actions']['submit']['#submit'] = ['pennchas_form_alter_soft_delete'];
    }
}

function pennchas_form_alter_soft_delete(array &$form, FormStateInterface $formState)
{
    $node = $formState->getFormObject()->getEntity();
    if ($node instanceof Node && $node->hasField('moderation_state')) {
        if ($node->get('moderation_state')->getString() !== Constant::MOD_STATUS_DELETE) {
            $node->set('moderation_state', Constant::MOD_STATUS_DELETE);
            $node->setUnpublished();
            $node->setRevisionLogMessage(t('Deleted'));
            $node->save();

            \Drupal::messenger()->addStatus(t('Node %title has been deleted.', ['%title' => $node->getTitle()]));
        } else {
            \Drupal::messenger()->addStatus(t('Node %title has already been deleted.', ['%title' => $node->getTitle()]));
        }
        $formState->setRedirect('entity.node.canonical', ['node' => $node->id()]);
    } else {
        \Drupal::messenger()->addStatus(t('Node of type %type doesnt support soft delete.', ['%type' => $node->gettype()]));
    }
}

function pennchas_form_alter_entity_presave(EntityInterface $entity)
{
    if ($entity instanceof NodeInterface) {
        if ($entity->isNew()) {
            (new NodePreInsertHook())->handle($entity);
        } else {
            (new NodePreUpdateHook())->handle($entity);
        }
    }
}

function pennchas_form_alter_node_insert(Node $node)
{
    $nodeType = $node->getType();
    if ($nodeType === Constant::NODE_RESERVE_ROOM || $nodeType === Constant::NODE_ROOM || $nodeType === Constant::NODE_EVENT  || $nodeType === Constant::NODE_NOTICES) {
        (new NodeInsertHook())->handle($node);
    }
}

function pennchas_form_alter_node_update(Node $node)
{
    $nodeType = $node->getType();
    if ($nodeType === Constant::NODE_EVENT) {
        (new NodeUpdateHook())->handle($node);
    }
}


function pennchas_form_alter_entity_type_alter(&$entityType)
{
    if (isset($entityType['group_role'])) {
        $entityKeys = $entityType['group_role']->get('entity_keys');
        $entityKeys['umbera_roles'] = 'umbera_roles';
        $entityType['group_role']->set('entity_keys', $entityKeys);
    }
}

function pennchas_form_alter_entity_bundle_field_info_alter(&$fields, $entityType, $bundle)
{
    if ($bundle === Constant::NODE_RESERVE_ROOM) {
        if (isset($fields['field_room'])) {
            $fields['field_room']->addConstraint('AllowRoomConstraint');
        }

        if (isset($fields['field_event_schedule'])) {
            $fields['field_event_schedule']->addConstraint('RoomAvailableConstraint');
        }

        if (isset($fields['field_anticipated_participants'])) {
            $fields['field_anticipated_participants']->addConstraint('RoomMaxGuestConstraint');
        }
    } else if ($bundle === Constant::NODE_ROOM) {
        if (isset($fields['field_room_gps_pin'])) {
            $fields['field_room_gps_pin']->addConstraint('GeoCoordinatesConstraint');
        }
    }
}

function pennchas_form_alter_role_form(array &$form, FormStateInterface $formState)
{
    $umberaRoles = [];
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('role_category');

    if (!empty($terms)) {
        foreach ($terms as $term) {
            $umberaRoles[$term->name] = $term->name;
        }

        $role = $formState->getFormObject()->getEntity();
        $existingUmbera_roles = $role->getThirdPartySetting('pennchas_form_alter', 'umbera_roles');

        $form['umbera_roles'] = [
            '#type' => 'checkboxes',
            '#title' => t('Umbera Roles'),
            '#default_value' => $existingUmbera_roles ?: '',
            '#options' => $umberaRoles
        ];

        $form['actions']['submit']['#submit'][] = 'role_form_submit_handler';
    }
}

function pennchas_form_alter_entity_operation_alter(array &$operations, EntityInterface $entity)
{
    if ($entity instanceof NodeInterface) {
        if (!$entity->isPublished() && $entity->get('moderation_state')->getString() === Constant::MOD_STATUS_DELETE) {
            if (isset($operations['edit'])) {
                unset($operations['edit']);
            }
            if (isset($operations['delete'])) {
                unset($operations['delete']);
            }
        }
    }
}

function role_form_submit_handler(&$form, FormStateInterface $formState)
{
    $umberaRoles = $formState->getValue('umbera_roles');
    $umberaRoles = array_filter($umberaRoles);
    if ($umberaRoles) {
        $role = $formState->getFormObject()->getEntity();
        $role->setThirdPartySetting('pennchas_form_alter', 'umbera_roles', $umberaRoles);
        $role->save();
    }
}

function _get_group_rooms(int $groupId)
{
    $roomsIds = \Drupal::entityQuery('node')
        ->accessCheck(false)
        ->condition('type', 'room')
        ->condition('status', 1)
        ->condition('field_group', $groupId)
        ->execute();

    $rooms = Node::loadMultiple($roomsIds);

    $roomOptions = [
        '' => '- Select a value -'
    ];
    foreach ($rooms as $room) {
        $roomOptions[$room->id()] = $room->getTitle();
    }
    return $roomOptions;
}
