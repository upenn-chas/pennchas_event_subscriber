<?php

use Drupal\group\Entity\Group;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;


// use Drupal\Core\Render\BubbleableMetadata;
function getGroupIdsByEntity($nid) {
  $query = \Drupal::database()->select('group_relationship_field_data', 'gr');
  $query->innerjoin('groups_field_data', 'gfd', 'gr.gid = gfd.id');
  $query->condition('gr.entity_id', $nid);

  // Don't include group user memberships in the query.
  $query->condition('gr.type', 'group-group_membership', '!=');

  $query->fields('gr', ['gid']);
  $result = $query->execute();
  // dd($result->gid);
  $groupIds = [];
  foreach ($result as $record) {
    $groupIds = $record->gid;
    }
  // $groupIds = $result->gid;
  return $groupIds;
}

function custom_token_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  //dd($entity);
  $content_type = $entity->bundle();
  if($content_type == 'location'){
    $nid = $entity->id();
    $path = '/node/' . $entity->getTitle();
    // $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$nid);
    // dd($alias);
    // $alias_manager = \Drupal::service('path_alias');
    // $node_alias = $alias_manager->getAliasByPath($path);
    $group_id = getGroupIdsByEntity($nid);
    // dd($group_id);
    if(!empty($group_id)){
      $group = Group::load($group_id);
      if ($group && $group->hasField('field_house_machine_name')) {
        $group_machine_name = $group->get('field_house_machine_name')->value;
        if(!empty($group_machine_name)){
          $node_alias = $group_machine_name.'/'.$path;
        }
      }
    }else{
      $node_alias = $path;
    }
    $custom_field = 'field_group_ref';
    $entity->set($custom_field, $node_alias);
    // dd($node_alias);
  }
  //  $entity->field_group_ref->value = 'testing-link';
  // $entity->set('field_group_ref', 'field_group_reftest');
    //set value for field
}

// function node_event_form_ext_token_info() {
//   $types['location_custom_token'] = [
//     'name' => t('Custom token'),
//     'description' => t('Define custom tokens.'),
//   ];
//   $tokens['location_title'] = [
//     'name' => t('location title'),
//     'description' => t('Token to get current location title.'),
//   ];
//   return [
//     'types' => $types,
//     'tokens' => ['location_custom_token' => $tokens],
//   ];
// }

// function get_groups_from_node($nid) {
//   $group_ids = array();
//   $ids = \Drupal::entityQuery('group_relationship')
//     ->condition('entity_id', $nid)
//     ->accessCheck()
//     ->execute();
//   // dd($ids);die();
//   // $relations = \Drupal\group\Entity\GroupContent::loadMultiple($ids);
//   // foreach ($relations as $rel) {
//   //   if ($rel->getEntity()->getEntityTypeId() == 'node') {
//   //     $group_ids[] = $rel->getGroup()->id();
//   //   }
//   // }

//   // return $group_ids;
// }

// /**
// * Implements hook_tokens().
// */
// function node_event_form_ext_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
//   $replacements = [];
//   if ($type == 'location_custom_token') {

//     // $nid = \Drupal::request()->query->get('location');
//     // if ($nid) {
//     //   $node_details = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
//     // }
//     foreach ($tokens as $name => $original) {
//       // Find the desired token by name.
//       switch ($name) {
//           case 'location_title':
//             $current_nid = $data['node']->id();
//             // dd($data['node']);
//             $groups = get_groups_from_node($current_nid);
//             // dd($groups);
//           // if ($node_details) {
//             $replacements[$original] = 'testing'; //$node_details->label();
//           // }
//           break;
//       }
//     }
//   }
//   // $replacements[$original] = 'testing-new'; //$node_details->label();
//   return $replacements;
// }
