<?php

/**
 * @file
 */

use Drupal\user\Entity\User;
use Drupal\Core\Render\BubbleableMetadata;
use SimpleSAML\Auth\Simple;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\group\Entity\Group;
use Drupal\node\Entity\Node;
use Drupal\group\GroupManager;
use Drupal\Core\Url;
use Drupal\Core\DependencyInjection\ContainerBuilder;
use Drupal\Core\DependencyInjection\Reference;
use Drupal\Core\StringTranslation\StringTranslationTrait;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_token_info().
 */
function penchas_custom_token_token_info(): array {
  $tokens = [];
  $tokens['penchas_custom_token']['event_subheading'] = [
    'name' => t('Subheading for Dashboard'),
    'description' => t("Event Info Subheading for Dashboard pages."),
  ];
  $tokens['penchas_custom_token']['penchas_myevent'] = [
    'name' => t('My Pending Event for Dashboard'),
    'description' => t("My Pending Event for Dashboard."),
  ];
  $tokens['penchas_custom_token']['penchas_my_reservation'] = [
    'name' => t('My Pending reservation for Dashboard'),
    'description' => t("My Pending reservation for Dashboard."),
  ];
  $tokens['penchas_custom_token']['user_dashboard_name'] = [
    'name' => t('User Name'),
    'description' => t("Preferred name from user profile. Fallback name will be Full name from User Profile."),
  ];

  $tokens['penchas_global']['current_house'] = [
    'name' => t('Current House'),
    'description' => t("Get the current house name by current Node"),
    // 'type' => 'hex',
  ];
  
  return [
    'types' => [
      'penchas_custom_token' => [
        'name' => t('Dashboard'),
        'description' => t('Custom Tokens for Dashboard pages'),
        'needs-data' => 'penchas_custom_token',
      ],
      'penchas_global' => [
        'name' => t('Penchas Global'),
        'description' => t('Custom tokens for Penchas'),
        'needs-data' => 'penchas_global',
      ],
    ],
    'tokens' => $tokens,
  ];
}


/**
 * Implements hook_tokens().
 */
function penchas_custom_token_tokens(string $type, array $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata): array {
  $replacements = [];
  $current_user_id = \Drupal::currentUser()->id();

  foreach ($tokens as $name => $original) {
    switch ($name) {
      case 'event_subheading':
        $replacements[$original] = \Drupal::service('pennchas_custom_token.pending_moderation_node_count')->nodeCountForModerator('chas_event');
        break;

      case 'penchas_myevent':
        $replacements[$original] = \Drupal::service('pennchas_custom_token.pending_moderation_node_count')->nodeCountForAuthor('chas_event', 'events pending.');
        break;

      case 'penchas_my_reservation':
        $replacements[$original] = \Drupal::service('pennchas_custom_token.pending_moderation_node_count')->nodeCountForAuthor('reserve_room', 'pending moderation.');
        break;

      case 'penchas_global':
          $replacements[$original] = 'testingcall';
          break;
  
      case 'user_dashboard_name':
        $current_user_id = \Drupal::currentUser()->id();
        $current_user = User::load($current_user_id);
        $user_name = $current_user->field_preferred_name->value;
        if (empty($user_name)) {
          $user_name = $current_user->field_full_name->value;
        }
        $replacements[$original] = $user_name;
        break;

      // Case 'user_assigned_role':
      //   $group_roles = [];
      //   $connection = Database::getConnection();
      //   $current_user = \Drupal::currentUser();
      //   $query = $connection->select('group_relationship_field_data', 'gr')
      //       ->fields('gr', ['id'])
      //       ->condition('entity_id', $current_user->id(), '=')
      //       ->condition('plugin_id', 'group_membership', '=');
      //   $results = $query->execute()->fetchAll();
      //   if(!empty($results)){
      //       foreach ($results as $result) {
      //         $current_user_role_id = $result->id;
      //         $role_query = $connection->select('group_relationship__group_roles', 'grr')
      //         ->fields('grr', ['group_roles_target_id'])
      //         ->condition('entity_id', $current_user_role_id, '=');
      //         $group_roles_results = $role_query->execute()->fetchAll();
      // if(!empty($group_roles_results)){
      //           foreach ($group_roles_results as $group_role_result) {
      //             $group_roles[$group_role_result->group_roles_target_id] = $group_role_result->group_roles_target_id;
      //           }
      //         }
      //       }
      //     }
      //     $group_roles_output = implode(',', $group_roles);
      //     $replacements[$original] = $group_roles_output;
      //     break;.
    }
  }
  // }
  return $replacements;
}

/**
 *
 */
function penchas_custom_token_permission() {
  $user = \Drupal::currentUser();
  if ($user->hasPermission('access my events')) {
    return AccessResult::allowed();
  }
  else {
    return AccessResult::forbidden();
  }
}

/**
 *
 */
function penchas_custom_token_node_access(Node $node, $op, AccountInterface $account) {

  if ($node) {
    $nid = $node->id();
    $current_uri = \Drupal::request()->getRequestUri();
    $user = \Drupal::currentUser();
    if($current_uri == '/dashboard'){
      if (!$user->isAuthenticated()) {
        return AccessResult::forbidden();
      }
    }
  }
  // if ($node->bundle() == 'chas_event') {
  //   $query = \Drupal::database()->select('node_field_data', 'n');
  //   $query->leftJoin('group_relationship_field_data', 'gr', 'n.nid = gr.entity_id');
  //   $query->fields('gr',['gid']);
  //   $query->condition('n.type', 'chas_event');
  //   $result = $query->execute()->fetchCol();
  //   // dd($result);
  //   foreach($result as $items => $item){
  //     if (!user_has_permission($account, 'access my events')) {
  //       // dd(check_user_group_permission($account, $item, 'access my events'));
  //       // if (!check_user_group_permission($account, $item, 'access my events')) {
  //         return AccessResult::forbidden();
  //       // }
  //     }
  //   }
  // }

  

  return AccessResult::allowed();
}

/**
 *
 */
function check_user_group_permission(AccountInterface $account, $group_id, $permission) {
  // Load the group entity by group ID.
  $group = Group::load($group_id);
  // dd($account);
  if ($group) {
    // Get all group memberships for the user.
    // $memberships = \Drupal::service('group.query')->getGroupMemberships($account);
    $group_manager = \Drupal::service('group.manager');

    $group_memberships = $group_manager->getGroupsByUser($account);
    // Check if the user is a member of the given group.
    foreach ($group_memberships as $group) {
    // Compare the group's ID.
      if ($group->id() == $group_id) {
        $roles = $group->getMemberRoles($account);
        foreach ($roles as $role) {
          if ($role->hasPermission($permission)) {
            return TRUE;
          }
        }
      }
    }
  }

  return FALSE;
}

/**
 * Custom function to check user permissions.
 */
function user_has_permission(AccountInterface $account, $permission) {
  return $account->hasPermission($permission);
}

function penchas_custom_token_get_pending_moderation_node()
{
  
}