<?php

namespace Drupal\penchas_block_group_role_condition\EventSubscriber;

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\EventSubscriber\FormSubmitEventSubscriberBase;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Drupal\Core\Block\BlockPluginManager;

/**
 * Class BlockFormAlterSubscriber.
 *
 * Listens for block form alterations.
 */
class BlockFormAlterSubscriber implements EventSubscriberInterface {

  /**
   * The block plugin manager service.
   *
   * @var \Drupal\Core\Block\BlockPluginManager
   */
  protected $blockPluginManager;

  /**
   * Constructs a BlockFormAlterSubscriber object.
   *
   * @param \Drupal\Core\Block\BlockPluginManager $block_plugin_manager
   *   The block plugin manager service.
   */
  public function __construct(BlockPluginManager $block_plugin_manager) {
    $this->blockPluginManager = $block_plugin_manager;
  }

  /**
   * {@inheritdoc}
   */
  public static function getSubscribedEvents() {
    // Listen for block configuration form alterations.
    // $events[form.alter] = ['onBlockFormAlter'];
    // return $events;
  }

  /**
   * Alters the block configuration form to add a custom field.
   *
   * @param array $form
   *   The block configuration form array.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The form state object.
   * @param \Drupal\Core\Block\BlockPluginInterface $block
   *   The block plugin being configured.
   */
  public function onBlockFormAlter(array &$form, FormStateInterface $form_state, BlockPluginInterface $block) {
    // Add a custom text field to the block configuration form.
    $form['my_custom_field'] = [
      '#type' => 'textfield',
      '#title' => t('Custom Field'),
      '#description' => t('This is a custom field added to all block types.'),
      '#default_value' => $block->getConfiguration()['my_custom_field'] ?? '',
    ];

    // Ensure the custom field is saved with the block configuration.
    $form['#submit'][] = [get_class($this), 'submitBlockForm'];
  }

  /**
   * Handles the form submission to save the custom field value.
   *
   * @param array $form
   *   The block configuration form array.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The form state object.
   */
  public static function submitBlockForm(array $form, FormStateInterface $form_state) {
    $block = $form_state->getFormObject()->getEntity();
    $block->setConfigurationValue('my_custom_field', $form_state->getValue('my_custom_field'));
  }

}
