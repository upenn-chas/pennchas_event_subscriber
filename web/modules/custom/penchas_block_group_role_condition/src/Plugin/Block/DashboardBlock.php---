<?php

namespace Drupal\penchas_block_group_role_condition\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;

/**
 * Provides a 'Dashboard Block' block.
 *
 * @Block(
 *   id = "dashbaord_block",
 *   admin_label = @Translation("Dashboard Block"),
 *   category = @Translation("Custom")
 * )
 */
class DashboardBlock extends BlockBase {
 /**
   * {@inheritdoc}
   */
  public function build() {
    // Display configuration settings in the block.
    $selected_value = $this->configuration['block_group_roles'] ?? '';
    $text_area_content = $this->configuration['cta_text'] ?? '';
    $cta_links = $this->configuration['cta_links'] ?? [];

    $output = [
      '#theme' => 'item_list',
      '#items' => array_map(function ($cta_link) {
        return $cta_link['label'] . ' (' . $cta_link['url'] . ')';
      }, $cta_links),
      '#title' => $this->t('CTA Links'),
    ];

    $output['#markup'] = Markup::create('<p>The selected value is: ' . $selected_value . '</p><p>' . nl2br(htmlspecialchars($text_area_content)) . '</p>');

    return $output;
  }

  /**
   * {@inheritdoc}
   */
  public function defaultConfiguration() {
    return [
      'block_group_roles' => '',
      'cta_text' => '',
      'cta_links' => [],
    ] + parent::defaultConfiguration();
  }

  /**
   * {@inheritdoc}
   */
  public function blockForm($form, FormStateInterface $form_state) {
    // $cta_links[] =
    $group_roles = get_all_group_roles();
    $form['block_group_roles'] = [
      '#type' => 'select',
      '#title' => $this->t('Block Display Condition with group roles'),
      '#options' => $group_roles,
      '#default_value' => $this->configuration['block_group_roles'],
      '#description' => $this->t('Choose an option from the dropdown list.'),
    ];
    $form['cta_text'] = [
      '#type' => 'textarea',
      '#title' => $this->t('CTA Description'),
      '#default_value' => $this->configuration['cta_text'],
      '#description' => $this->t('Enter the text content for this block.'),
    ];

    $cta_links = $form_state->get('cta_links') ?? $this->configuration['cta_links'] ?? ['label' => '', 'url' => ''];
    if (!$form_state->has('cta_links')) {
      $form_state->set('cta_links', $cta_links);
    }

    // Add the table.
    $form['links_wrapper'] = [
        '#type' => 'container',
        '#attributes' => ['id' => 'cta-links-table-wrapper'],
    ];
    $form['links_wrapper']['cta_links'] = [
      '#type' => 'table',
      '#header' => [
        $this->t('Label'),
        $this->t('URL'),
        $this->t('Operations'),
      ],
      '#empty' => $this->t('No CTA links have been added. Click "Add Another" to add rows.'),
    ];

    foreach ($cta_links as $index => $cta_link) {
      $form['links_wrapper']['cta_links'][$index]['label'] = [
        '#type' => 'textfield',
        '#default_value' => $cta_link['label'],
        '#size' => 30,
        '#attributes' => ['placeholder' => $this->t('Enter label')],
      ];
      $form['links_wrapper']['cta_links'][$index]['url'] = [
        '#type' => 'textfield',
        '#default_value' => $cta_link['url'],
        '#size' => 30,
        '#attributes' => ['placeholder' => $this->t('Enter URL')],
      ];
      $form['links_wrapper']['cta_links'][$index]['operations'] = [
        '#type' => 'submit',
        '#value' => $this->t('Remove'),
        '#name' => 'remove_' . $index,
        '#submit' => [[$this, 'removeRow']],
        '#ajax' => [
          'callback' => '::ajaxCallback',
          'wrapper' => 'cta-links-table-wrapper',
        ],
        '#row_index' => $index,
      ];
    }

    // Add the "Add Another" button.
    $form['links_wrapper']['add_cta_link'] = [
      '#type' => 'submit',
      '#value' => $this->t('Add Another'),
      '#submit' => [[$this, 'addRow']],
      '#ajax' => [
        'callback' => '::addRowAjax',
        'wrapper' => 'cta-links-table-wrapper',
      ],
    ];

    return $form;
  }

  /**
   * Add a new CTA link row.
   */
  public function addRowAjax(array &$form, FormStateInterface $form_state) {
    \Drupal::logger('module_name')->notice('<pre>'.print_r('test', TRUE).'</pre>');
    $cta_links = $form_state->get('cta_links') ?? [];
    $cta_links[] = ['label' => '', 'url' => ''];
    $form_state->set('cta_links', $cta_links);
    $form_state->setRebuild();
    return $form['links_wrapper'];
  }

  public function ajaxCallback(array &$form, FormStateInterface $form_state) {
    return $form['links_wrapper'];
  }

  /**
   * Add a new row to the table.
   */
  public function addRow(array &$form, FormStateInterface $form_state) {
    $cta_links = $form_state->get('cta_links');
    $cta_links[] = ['label' => '', 'url' => ''];
    $form_state->set('cta_links', $cta_links);
    $form_state->setRebuild();
  }

  /**
   * Remove a specific row from the table.
   */
  public function removeRow(array &$form, FormStateInterface $form_state) {
    $triggering_element = $form_state->getTriggeringElement();
    $row_index = $triggering_element['#row_index'];
    $cta_links = $form_state->get('cta_links');
    unset($cta_links[$row_index]);
    $form_state->set('cta_links', array_values($cta_links));
    $form_state->setRebuild();
  }

  /**
   * {@inheritdoc}
   */
  public function blockSubmit($form, FormStateInterface $form_state) {
    $this->configuration['block_group_roles'] = $form_state->getValue('block_group_roles');
    $this->configuration['cta_text'] = $form_state->getValue('cta_text');
    $this->configuration['cta_links'] = $form_state->get('cta_links') ?? [];
  }

}
