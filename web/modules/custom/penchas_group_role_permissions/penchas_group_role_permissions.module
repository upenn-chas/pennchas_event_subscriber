<?php
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

use Drupal\Core\Session\AccountInterface;

use Drupal\views\Views;

use Drupal\layout_builder\Entity\LayoutBuilder;
use Drupal\Core\Layout\LayoutEntityInterface;

/**
 * Implements hook_block_info().
 */
function penchas_group_role_permissions_block_info() {
  $blocks = [];

  $blocks['custom_view_block'] = array(
    'info' => t('Custom View Block with Pagination'),
  );

  return $blocks;
}

/**
 * Adds the custom view block to a layout programmatically.
 */
function penchas_group_role_permissions_add_block_to_layout($layout_id) {
  // Load the layout entity.
  $layout = LayoutBuilder::load($layout_id); // Replace with the specific layout ID.

  // Add the custom block to the layout region (e.g., content region).
  $layout->addBlock('custom_view_block', 'content', 0); // Adjust region as needed.

  // Save the layout after the changes.
  $layout->save();
}

// Check if the current user can view a specific view.
// function penchas_group_role_permissions_view_access() {
//   $view = Views::getView('your_view_name');  // Replace with your view name

//   // Ensure the view exists
//   if ($view) {
//     // Check if the current user has access to view it
//     $user = \Drupal::currentUser();
//     $access = $view->access('page', NULL, $user);

//     if ($access) {
//       return TRUE; // User has permission to render the view
//     }
//   }
//   return FALSE; // User does not have permission to render the view
// }


/**
 * Example function that checks if the current user has a custom permission.
 */
// function penchas_group_role_permissions_check_permission() {
//   // Check if the current user has the 'access custom content' permission.
//   if (\Drupal::currentUser()->hasPermission('access my rerservations') || \Drupal::currentUser()->hasPermission('access my events') ) {
//     // The user has the permission.
//     return TRUE;
//   }
//   else {
//     // The user does not have the permission.
//     return FALSE;
//   }
// }

/**
 * Implements hook_entity_base_field_info().
 */
function penchas_group_role_permissions_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = array();

  // Add a 'Highlight' base field to all node types.
  // dump($entity_type->id());
  if ($entity_type->id() === 'node') {
    // $fields['highlight'] = BaseFieldDefinition::create('boolean')
    //   ->setLabel(t('Highlight'))
    //   ->setDescription(t('Whether or not the node is highlighted.'))
    //   ->setRevisionable(TRUE)
    //   ->setTranslatable(TRUE)
    //   ->setDisplayOptions('form', array(
    //     'type' => 'boolean_checkbox',
    //     'settings' => array(
    //       'display_label' => TRUE,
    //     ),
    //   ))
    //   ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}
